<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Posts | Fundamenta Nova</title>
    <link>/post/</link>
      <atom:link href="/post/index.xml" rel="self" type="application/rss+xml" />
    <description>Posts</description>
    <generator>Source Themes Academic (https://sourcethemes.com/academic/)</generator><language>en-us</language><lastBuildDate>Thu, 02 Jul 2020 00:00:00 +0000</lastBuildDate>
    <image>
      <url>/images/icon_hu0b7a4cb9992c9ac0e91bd28ffd38dd00_9727_512x512_fill_lanczos_center_2.png</url>
      <title>Posts</title>
      <link>/post/</link>
    </image>
    
    <item>
      <title>In Machine Learning, why is Regularization called Regularization?</title>
      <link>/post/004_regularization/main/</link>
      <pubDate>Thu, 02 Jul 2020 00:00:00 +0000</pubDate>
      <guid>/post/004_regularization/main/</guid>
      <description>


&lt;div id=&#34;introduction&#34; class=&#34;section level2&#34;&gt;
&lt;h2&gt;Introduction&lt;/h2&gt;
&lt;p&gt;Many newcomers to machine learning know about regularization, but they may not understand it yet. In particular, they may not know why regularization has that name. In this post we discuss the numerical and statistical significance of regularization methods in machine learning and more general statistical models. We’ll try to introduce why one may want to use regularization methods in the first place and how to interpret the fitted model from a statistical point of view.&lt;/p&gt;
&lt;p&gt;The post will be long because there are a lot of cute nooks and crannies, and we’ll assume you know your linear algebra. However, if you already know what an inner product is then we think this post will be worth your time.&lt;/p&gt;
&lt;/div&gt;
&lt;div id=&#34;matrices-and-linear-ill-posed-problems&#34; class=&#34;section level2&#34;&gt;
&lt;h2&gt;Matrices and Linear Ill-Posed Problems&lt;/h2&gt;
&lt;p&gt;Suppose that we have a matrix &lt;span class=&#34;math inline&#34;&gt;\(A\in \mathbb{R}^{N \times p}\)&lt;/span&gt;, a vector &lt;span class=&#34;math inline&#34;&gt;\(y\in \mathbb{R}^N\)&lt;/span&gt;, and that we seek a vector &lt;span class=&#34;math inline&#34;&gt;\(\beta\in\mathbb{R}^p\)&lt;/span&gt; such that &lt;span class=&#34;math inline&#34;&gt;\(A\beta = y\)&lt;/span&gt;. How would one solve this problem? One answer might be to simply apply the inverse matrix to both sides of the equation: &lt;span class=&#34;math inline&#34;&gt;\(\beta = A^{-1}y\)&lt;/span&gt;. However, there are three problems with this:&lt;/p&gt;
&lt;ol style=&#34;list-style-type: decimal&#34;&gt;
&lt;li&gt;A matrix inverse &lt;span class=&#34;math inline&#34;&gt;\(A^{-1}\)&lt;/span&gt; may not exist.&lt;/li&gt;
&lt;li&gt;Even if the matrix inverse exists it can be extremely expensive to calculate this inverse and apply the result to &lt;span class=&#34;math inline&#34;&gt;\(y\)&lt;/span&gt;.&lt;/li&gt;
&lt;li&gt;Even if we are somehow able to calculate &lt;span class=&#34;math inline&#34;&gt;\(A^{-1}y\)&lt;/span&gt; the solution may not be very stable. Small numerical changes in either &lt;span class=&#34;math inline&#34;&gt;\(A\)&lt;/span&gt; or &lt;span class=&#34;math inline&#34;&gt;\(y\)&lt;/span&gt; may lead to large changes in the solution &lt;span class=&#34;math inline&#34;&gt;\(\beta\)&lt;/span&gt;.&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;Issue 2 above is not really a problem in the sense that &lt;a href=&#34;https://www.johndcook.com/blog/2010/01/19/dont-invert-that-matrix/&#34;&gt;one should never really need to find &lt;span class=&#34;math inline&#34;&gt;\(A^{-1}\)&lt;/span&gt; to compute &lt;span class=&#34;math inline&#34;&gt;\(A^{-1}y\)&lt;/span&gt;&lt;/a&gt;. Instead the most efficient numerical algorithms typically compute &lt;span class=&#34;math inline&#34;&gt;\(A^{-1}y\)&lt;/span&gt; by using special factorizations of &lt;span class=&#34;math inline&#34;&gt;\(A\)&lt;/span&gt;, such as &lt;a href=&#34;https://en.wikipedia.org/wiki/QR_decomposition&#34;&gt;QR decomposition&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;The other two issues are very important and are inextricably linked to each other and to regularization in machine learning.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;p&gt;Issue 3 means just what is says: that the solution &lt;span class=&#34;math inline&#34;&gt;\(\beta\)&lt;/span&gt; may change a lot if the known data &lt;span class=&#34;math inline&#34;&gt;\(A\)&lt;/span&gt; and/or &lt;span class=&#34;math inline&#34;&gt;\(y\)&lt;/span&gt; only change a little.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Issue 1 means that the matrix is not invertible. A matrix that is not invertible is called &lt;strong&gt;&lt;em&gt;singular&lt;/em&gt;&lt;/strong&gt;. A matrix that is invertible is usually called &lt;strong&gt;&lt;em&gt;nonsingular&lt;/em&gt;&lt;/strong&gt;, but a less common synonym is &lt;a href=&#34;https://mathworld.wolfram.com/RegularMatrix.html&#34;&gt;&lt;strong&gt;&lt;em&gt;regular&lt;/em&gt;&lt;/strong&gt;&lt;/a&gt; and this is where the name &lt;em&gt;regularization&lt;/em&gt; comes from. When a matrix is singular it means that the problem &lt;span class=&#34;math inline&#34;&gt;\(A\beta = y\)&lt;/span&gt; may have either no solution at all or have at least 2 distinct solutions.&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Any one of these issues being true means that the linear problem &lt;span class=&#34;math inline&#34;&gt;\(A\beta = y\)&lt;/span&gt; is ill-posed in the sense that it violates Hadamard’s conditions for a &lt;a href=&#34;https://en.wikipedia.org/wiki/Well-posed_problem&#34;&gt;well-posed problem&lt;/a&gt;. To be well-posed:&lt;/p&gt;
&lt;ol style=&#34;list-style-type: decimal&#34;&gt;
&lt;li&gt;A problem must have a solution&lt;/li&gt;
&lt;li&gt;The solution must be unique&lt;/li&gt;
&lt;li&gt;The solution’s behavior must be stable/continuous with respect to the data&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;These conditions are of extreme practical importance. They basically define what it means for a problem to be solvable &lt;strong&gt;&lt;em&gt;in practice&lt;/em&gt;&lt;/strong&gt;. In the case of the linear algebra problem above regularization means “&lt;em&gt;making the matrix regular&lt;/em&gt;” so that these conditions will hold true on the regularized problem. That’s where the name comes from.&lt;/p&gt;
&lt;p&gt;Ok, cool but why are these conditions important to ML or statistics? Consider the case of Maximum Likelihood Estimation (MLE) of a parametric model (although the lesson applies more generally):&lt;/p&gt;
&lt;ol style=&#34;list-style-type: decimal&#34;&gt;
&lt;li&gt;In MLE we estimate a model’s unknown parameters by maximizing the log-likelihood. If no such maximizing values of the parameters can be found then the optimization problem does not have a solution and we can not obtain estimates for the unknown parameters to begin with! So, mirroring the first Hadamard condition, we require a maximizer to exist.&lt;/li&gt;
&lt;li&gt;Non-Bayesian statistical models naturally assume that a single fixed set of parameters exists that specifies the relevant distributions. If MLE gives multiple sets of parameters that maximize the likelihood (as happens in the presence of multiple local maxima) we may have no way to tell which maximizer is the one that estimates the actual parameters the best! So, mirroring the second Hadamard condition, we require the maximizer to be unique.&lt;/li&gt;
&lt;li&gt;Statistical models assume that data is in part random and so is subject to changes. If the estimated values of the parameters change a lot when the data changes a little then it’s impossible to tell when the MLE estimated parameters are in fact good estimates of the true parameters and when they are not! So, mirroring the third Hadamard condition, we require the maximizer to be stable with respect to changes in the data used for the fit.&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;Regularization is one way to change the problem so that these conditions are met.&lt;/p&gt;
&lt;/div&gt;
&lt;div id=&#34;some-examples&#34; class=&#34;section level2&#34;&gt;
&lt;h2&gt;Some examples&lt;/h2&gt;
&lt;p&gt;Ok, let’s look at some examples!&lt;/p&gt;
&lt;div id=&#34;shifting-the-eigenvalues-of-a-symmetric-matrix&#34; class=&#34;section level3&#34;&gt;
&lt;h3&gt;Shifting the eigenvalues of a Symmetric Matrix&lt;/h3&gt;
&lt;p&gt;Suppose we are asked to solve the linear inverse problem from above &lt;span class=&#34;math inline&#34;&gt;\(A\beta = y\)&lt;/span&gt;, but that this time &lt;span class=&#34;math inline&#34;&gt;\(A\in \mathbb{R}^{N\times N}\)&lt;/span&gt; is a symmetric matrix. The &lt;a href=&#34;https://pages.mtu.edu/~msgocken/ma5630spring2003/lectures/spectral/spectral/node2.html&#34;&gt;spectral theorem for symmetric matrices&lt;/a&gt; tells us that &lt;span class=&#34;math inline&#34;&gt;\(A\)&lt;/span&gt; can be represented as&lt;/p&gt;
&lt;p&gt;&lt;span class=&#34;math display&#34;&gt;\[
A = QDQ^T
\]&lt;/span&gt;
where &lt;span class=&#34;math inline&#34;&gt;\(Q\)&lt;/span&gt; is an &lt;a href=&#34;https://en.wikipedia.org/wiki/Orthogonal_matrix&#34;&gt;orthogonal matrix&lt;/a&gt; and &lt;span class=&#34;math inline&#34;&gt;\(D\)&lt;/span&gt; is a diagonal matrix. Moreover, the columns of &lt;span class=&#34;math inline&#34;&gt;\(Q\)&lt;/span&gt; are the eigenvectors of &lt;span class=&#34;math inline&#34;&gt;\(A\)&lt;/span&gt;, and the diagonal elements of &lt;span class=&#34;math inline&#34;&gt;\(D\)&lt;/span&gt; are the corresponding (real) eigenvalues. &lt;a href=&#34;https://mast.queensu.ca/~br66/419/spectraltheoremproof.pdf&#34;&gt;Here’s&lt;/a&gt; a proof if you care for it.&lt;/p&gt;
&lt;p&gt;This representation shows us exactly what the theoretical difficulty is in the inverse problem. Inverting &lt;span class=&#34;math inline&#34;&gt;\(Q\)&lt;/span&gt; is easy. Indeed orthogonal matrices are always invertible, with the inverse given by the transpose: &lt;span class=&#34;math inline&#34;&gt;\(Q^{-1} = Q^T\)&lt;/span&gt;. The geometric significance of orthogonal matrices comes from the fact (basically their definition) that they preserve the inner product of vectors: If we denote the inner product by &lt;span class=&#34;math inline&#34;&gt;\(\langle \cdot,\cdot\rangle\)&lt;/span&gt; then for any &lt;span class=&#34;math inline&#34;&gt;\(x,y \in R^N\)&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span class=&#34;math display&#34;&gt;\[
\langle x, y \rangle = \langle Qx, Qy \rangle
\]&lt;/span&gt;
Thus (using the definition of the transpose) &lt;span class=&#34;math inline&#34;&gt;\(\langle x, y \rangle = \langle Q^TQx, y \rangle\)&lt;/span&gt;. Since this holds for any &lt;span class=&#34;math inline&#34;&gt;\(y\)&lt;/span&gt;, then &lt;span class=&#34;math inline&#34;&gt;\(x = Q^TQx\)&lt;/span&gt; for all &lt;span class=&#34;math inline&#34;&gt;\(x\)&lt;/span&gt;. Since this holds for all &lt;span class=&#34;math inline&#34;&gt;\(x\)&lt;/span&gt; then &lt;span class=&#34;math inline&#34;&gt;\(Q^TQ = I\)&lt;/span&gt; and so &lt;span class=&#34;math inline&#34;&gt;\(Q^T\)&lt;/span&gt; is the inverse of &lt;span class=&#34;math inline&#34;&gt;\(Q\)&lt;/span&gt;.&lt;/p&gt;
&lt;p&gt;No, the difficulty is simply in inverting the diagonal matrix &lt;span class=&#34;math inline&#34;&gt;\(D = \text{diag}(\sigma_1, \sigma_2, ..., \sigma_N)\)&lt;/span&gt;. If none of the eigenvalues &lt;span class=&#34;math inline&#34;&gt;\(\sigma_i\)&lt;/span&gt; are &lt;span class=&#34;math inline&#34;&gt;\(0\)&lt;/span&gt; then &lt;span class=&#34;math inline&#34;&gt;\(D^{-1} = \text{diag}(\sigma_1^{-1}, \sigma_2^{-1}, ..., \sigma_N^{-1})\)&lt;/span&gt;. In this case there isn’t any direction that &lt;span class=&#34;math inline&#34;&gt;\(D\)&lt;/span&gt; (and hence &lt;span class=&#34;math inline&#34;&gt;\(A\)&lt;/span&gt;) squashes into &lt;span class=&#34;math inline&#34;&gt;\(0\)&lt;/span&gt;. However, if some of the &lt;span class=&#34;math inline&#34;&gt;\(\sigma_i\)&lt;/span&gt;’s are &lt;span class=&#34;math inline&#34;&gt;\(0\)&lt;/span&gt; then we can not invert &lt;span class=&#34;math inline&#34;&gt;\(D\)&lt;/span&gt; and the problem will fail to satisfy at least one of the first 2 Hadamard conditions. Even if none of the &lt;span class=&#34;math inline&#34;&gt;\(\sigma_i\)&lt;/span&gt;’s are exactly &lt;span class=&#34;math inline&#34;&gt;\(0\)&lt;/span&gt;, some may be numerically very close to &lt;span class=&#34;math inline&#34;&gt;\(0\)&lt;/span&gt; in comparison to the others. In that case the value of their reciprocals may be enormously large and may lead to numerical instability in the problem, violating the 3rd Hadamard condition. This would be a big problem in practice because computers &lt;a href=&#34;https://floating-point-gui.de/errors/propagation/&#34;&gt;hate mixing floating point numbers that are drastically different in size&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;To address this issue we note that we can shift the eigenvalues of &lt;span class=&#34;math inline&#34;&gt;\(A\)&lt;/span&gt; by adding a multiple of an identity matrix:&lt;/p&gt;
&lt;p&gt;&lt;span class=&#34;math display&#34;&gt;\[
A \to  A + \lambda I
\]&lt;/span&gt;
If &lt;span class=&#34;math inline&#34;&gt;\(\sigma\)&lt;/span&gt; is an eigenvalue of &lt;span class=&#34;math inline&#34;&gt;\(A\)&lt;/span&gt; then &lt;span class=&#34;math inline&#34;&gt;\(\sigma+\lambda\)&lt;/span&gt; is an eigenvalue of &lt;span class=&#34;math inline&#34;&gt;\(A+\lambda I\)&lt;/span&gt;. This is because every vector is an eigenvector of &lt;span class=&#34;math inline&#34;&gt;\(I\)&lt;/span&gt;: If &lt;span class=&#34;math inline&#34;&gt;\(Av = \sigma v\)&lt;/span&gt; then trivially &lt;span class=&#34;math inline&#34;&gt;\(\lambda Iv = \lambda v\)&lt;/span&gt;, so adding gives &lt;span class=&#34;math inline&#34;&gt;\((A+\lambda I)v = (\sigma + \lambda)v\)&lt;/span&gt;. This can also be seen form the representation above:
&lt;span class=&#34;math display&#34;&gt;\[
A + \lambda I = QDQ^T + \lambda QQ^T = Q(D + \lambda I)Q^T = Q\tilde{D}Q^T
\]&lt;/span&gt;
where &lt;span class=&#34;math inline&#34;&gt;\(\tilde{D}= \text{diag}(\sigma_1 + \lambda, \sigma_2 + \lambda, ..., \sigma_N + \lambda)\)&lt;/span&gt;. Therefore, if we choose &lt;span class=&#34;math inline&#34;&gt;\(\lambda &amp;gt; \min\{\sigma_1, \sigma_2, ..., \sigma_N\}+ \delta\)&lt;/span&gt; for some &lt;span class=&#34;math inline&#34;&gt;\(\delta &amp;gt; 0\)&lt;/span&gt;, then all the shifted eigenvalues satisfy &lt;span class=&#34;math inline&#34;&gt;\(\sigma_i + \lambda &amp;gt; \delta &amp;gt; 0\)&lt;/span&gt; and the new shifted problem&lt;/p&gt;
&lt;p&gt;&lt;span class=&#34;math display&#34;&gt;\[
(A+\lambda I)x = y
\]&lt;/span&gt;
will be solvable with solution given by
&lt;span class=&#34;math display&#34;&gt;\[
x = Q(D + \lambda I)^{-1}Q^Ty
\]&lt;/span&gt;
If &lt;span class=&#34;math inline&#34;&gt;\(\lambda\)&lt;/span&gt; is sufficiently large this inverse will exist and will be numerically stable (all of the eigenvalues will have been shifted away from 0).&lt;/p&gt;
&lt;p&gt;Making the change &lt;span class=&#34;math inline&#34;&gt;\(A \to A + \lambda I\)&lt;/span&gt; regularized the problem into one that satisfied Hadamard’s conditions, which is fundamentally the point of regularization. The change we made was essentially to replace the &lt;span class=&#34;math inline&#34;&gt;\(A^{-1}\)&lt;/span&gt; with the approximation &lt;span class=&#34;math inline&#34;&gt;\((A+\lambda I)^{-1}\)&lt;/span&gt;, but we could have used other approximations as well, for example partial sums of the &lt;a href=&#34;https://en.wikipedia.org/wiki/Invertible_matrix#By_Neumann_series&#34;&gt;Neumann Series Expansion of the &lt;span class=&#34;math inline&#34;&gt;\(A^{-1}\)&lt;/span&gt;&lt;/a&gt;. Regardless, the general principle illustrated above is basically to replace one problem by an approximate problem that does not suffer the same existence/stability issues.&lt;/p&gt;
&lt;/div&gt;
&lt;div id=&#34;regularization-as-a-perturbation-of-an-invertible-matrix&#34; class=&#34;section level3&#34;&gt;
&lt;h3&gt;Regularization as a perturbation of an invertible matrix&lt;/h3&gt;
&lt;p&gt;Above we regularized the ill-posed problem &lt;span class=&#34;math inline&#34;&gt;\(A\beta = y\)&lt;/span&gt; by replacing it with the problem &lt;span class=&#34;math inline&#34;&gt;\((A+\lambda I)x = y\)&lt;/span&gt;. Let’s go a bit deeper with this process.&lt;strong&gt;You may skip this section on your first read.&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;Dividing by &lt;span class=&#34;math inline&#34;&gt;\(\lambda\)&lt;/span&gt;, the problem &lt;span class=&#34;math inline&#34;&gt;\((A+\lambda I)x = y\)&lt;/span&gt; is equivalent to the problem&lt;/p&gt;
&lt;p&gt;&lt;span class=&#34;math display&#34;&gt;\[
(\epsilon A+I)x = \epsilon y
\]&lt;/span&gt;
where &lt;span class=&#34;math inline&#34;&gt;\(\epsilon := \frac{1}{\lambda}\)&lt;/span&gt;. When &lt;span class=&#34;math inline&#34;&gt;\(\lambda\)&lt;/span&gt; is large &lt;span class=&#34;math inline&#34;&gt;\(\epsilon\)&lt;/span&gt; is small, and vice versa. Hence for large &lt;span class=&#34;math inline&#34;&gt;\(\lambda\)&lt;/span&gt; the matrix &lt;span class=&#34;math inline&#34;&gt;\(\epsilon A+I\)&lt;/span&gt; can be seen as a small perturbation from the identity matrix &lt;span class=&#34;math inline&#34;&gt;\(I\)&lt;/span&gt;.&lt;/p&gt;
&lt;p&gt;Now because &lt;span class=&#34;math inline&#34;&gt;\(I\)&lt;/span&gt; is invertible then for a small enough &lt;span class=&#34;math inline&#34;&gt;\(\epsilon\)&lt;/span&gt; (and hence for a large enough &lt;span class=&#34;math inline&#34;&gt;\(\lambda\)&lt;/span&gt;) the preturbed matrix &lt;span class=&#34;math inline&#34;&gt;\(\epsilon A+I\)&lt;/span&gt; is also invertible! Why? That’s a great question! The previous section gave one proof, but there are some much nicer ways to see why:&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Proof:&lt;/strong&gt; Consider the function
&lt;span class=&#34;math display&#34;&gt;\[
\det:\mathbb{R}^{N\times N} \to \mathbb{R}
\]&lt;/span&gt;
that maps a matrix to it’s &lt;a href=&#34;https://en.wikipedia.org/wiki/Determinant&#34;&gt;determinant&lt;/a&gt;. Because the space &lt;span class=&#34;math inline&#34;&gt;\(\mathbb{R}^{N\times N}\)&lt;/span&gt; of &lt;span class=&#34;math inline&#34;&gt;\(N\times N\)&lt;/span&gt; matrices is just the Euclidean inner product space &lt;span class=&#34;math inline&#34;&gt;\(\mathbb{R}^{N^2}\)&lt;/span&gt; with some extra algebraic structure, and because &lt;span class=&#34;math inline&#34;&gt;\(\det(A)\)&lt;/span&gt; is a polynomial function of the elements of a matrix &lt;span class=&#34;math inline&#34;&gt;\(A\)&lt;/span&gt;, &lt;span class=&#34;math inline&#34;&gt;\(\det\)&lt;/span&gt; is a continuous function on &lt;span class=&#34;math inline&#34;&gt;\(\mathbb{R}^{N\times N}\)&lt;/span&gt;.&lt;/p&gt;
&lt;p&gt;By &lt;a href=&#34;https://en.wikipedia.org/wiki/Cramer%27s_rule&#34;&gt;Cramer’s Rule&lt;/a&gt;, a matrix &lt;span class=&#34;math inline&#34;&gt;\(A\)&lt;/span&gt; is invertible if and only if &lt;span class=&#34;math inline&#34;&gt;\(\det(A) \ne 0\)&lt;/span&gt;. Because &lt;span class=&#34;math inline&#34;&gt;\(\det\)&lt;/span&gt; is a continuous function on &lt;span class=&#34;math inline&#34;&gt;\(\mathbb{R}^{N\times N}\)&lt;/span&gt; then the set of invertible matrices is an open subset of &lt;span class=&#34;math inline&#34;&gt;\(\mathbb{R}^{N\times N}\)&lt;/span&gt;! Hence for every invertible matrix &lt;span class=&#34;math inline&#34;&gt;\(L\in\mathbb{R}^{N\times N}\)&lt;/span&gt; and every arbitrary matrix &lt;span class=&#34;math inline&#34;&gt;\(A\in\mathbb{R}^{N\times N}\)&lt;/span&gt; there exists an &lt;span class=&#34;math inline&#34;&gt;\(\epsilon_0 &amp;gt; 0\)&lt;/span&gt; such that for all &lt;span class=&#34;math inline&#34;&gt;\(\epsilon &amp;lt; \epsilon_0\)&lt;/span&gt; the matrix &lt;span class=&#34;math inline&#34;&gt;\(\epsilon A+L\)&lt;/span&gt; is invertible. &lt;strong&gt;QED&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;There’s a version of the theorem in Banach spaces, but we don’t need it.&lt;/p&gt;
&lt;p&gt;Noticed that the only thing we needed about the matrix &lt;span class=&#34;math inline&#34;&gt;\(I\)&lt;/span&gt; in the above proof was that it was invertible. Therefore, we never needed to restrict attention to just the identity matrix &lt;span class=&#34;math inline&#34;&gt;\(I\)&lt;/span&gt;, but could have used any invertible matrix to regularize the problem:&lt;/p&gt;
&lt;p&gt;&lt;span class=&#34;math display&#34;&gt;\[
(A+\lambda L)x = y
\]&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;where &lt;span class=&#34;math inline&#34;&gt;\(L\)&lt;/span&gt; is any convenient invertible matrix. Below, where we regularize OLS, we are not restricted to using the identity matrix &lt;span class=&#34;math inline&#34;&gt;\(I\)&lt;/span&gt; to regularize, but can use any invertible symmetric matrix (preferably one that is positive definite so that a minimizer continues to exist).&lt;/p&gt;
&lt;/div&gt;
&lt;div id=&#34;l2-regularization-of-ols&#34; class=&#34;section level3&#34;&gt;
&lt;h3&gt;&lt;span class=&#34;math inline&#34;&gt;\(L^2\)&lt;/span&gt;-regularization of OLS&lt;/h3&gt;
&lt;p&gt;With this example we begin moving towards the statistical part of the post. One of the most widely known examples of regularization is what is often called &lt;span class=&#34;math inline&#34;&gt;\(L^2\)&lt;/span&gt;-regularization, or &lt;a href=&#34;https://en.wikipedia.org/wiki/Tikhonov_regularization&#34;&gt;Tikhonov&lt;/a&gt; regularization of Ordinary Least Squares.&lt;/p&gt;
&lt;p&gt;Suppose &lt;span class=&#34;math inline&#34;&gt;\(Y\)&lt;/span&gt; is a real valued random variable and &lt;span class=&#34;math inline&#34;&gt;\(\vec{X}\)&lt;/span&gt; is a random vector with values in &lt;span class=&#34;math inline&#34;&gt;\(\mathbb{R}^p\)&lt;/span&gt;. Suppose that we have the conditional relationship&lt;/p&gt;
&lt;p&gt;&lt;span class=&#34;math display&#34;&gt;\[
Y \ \ | \ \ \vec{X} \sim \mathcal{N}(\ \langle \vec{X}  , \beta\rangle \ ,\ \sigma^2)
\]&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;where &lt;span class=&#34;math inline&#34;&gt;\(\mathcal{N}(\mu, \sigma^2)\)&lt;/span&gt; denotes the univariate normal distribution with mean &lt;span class=&#34;math inline&#34;&gt;\(\mu\)&lt;/span&gt; and variance &lt;span class=&#34;math inline&#34;&gt;\(\sigma^2\)&lt;/span&gt;. Here (and everywhere else) the symbol &lt;span class=&#34;math inline&#34;&gt;\(\langle v,w\rangle\)&lt;/span&gt; represents the inner product of two vectors &lt;span class=&#34;math inline&#34;&gt;\(v\)&lt;/span&gt; and &lt;span class=&#34;math inline&#34;&gt;\(w\)&lt;/span&gt;. This is the most natural probability model that leads to linear regression. In practice the parameters &lt;span class=&#34;math inline&#34;&gt;\(\beta\)&lt;/span&gt; and &lt;span class=&#34;math inline&#34;&gt;\(\sigma\)&lt;/span&gt; that specify this conditional distribution are unknown and it is desired that they be estimated from data.&lt;/p&gt;
&lt;p&gt;In this canonical situation we assume that we have a data set &lt;span class=&#34;math inline&#34;&gt;\(\{ (Y_i, \vec{X}_i)\}_{i = 1}^N\)&lt;/span&gt; consisting of samples generated independently of one another from a fixed multivariate distribution for &lt;span class=&#34;math inline&#34;&gt;\((Y, \vec{X})\)&lt;/span&gt; (i.e. we assume our data was sampled IID). To fit the unknown parameters we use MLE. We may choose to use the conditional density &lt;span class=&#34;math inline&#34;&gt;\(p(Y|\vec{X})\)&lt;/span&gt; in the likelihood and this would make it &lt;strong&gt;&lt;em&gt;conditional&lt;/em&gt;&lt;/strong&gt; MLE. Or we may choose the unconditional multivariate density &lt;span class=&#34;math inline&#34;&gt;\(p(Y, \vec{X})\)&lt;/span&gt;. However, if we assume that the marginal distribution of &lt;span class=&#34;math inline&#34;&gt;\(\vec{X}\)&lt;/span&gt;, (i.e. &lt;span class=&#34;math inline&#34;&gt;\(p(\vec{X})\)&lt;/span&gt;), does not depend on either &lt;span class=&#34;math inline&#34;&gt;\(\beta\)&lt;/span&gt; or &lt;span class=&#34;math inline&#34;&gt;\(\sigma\)&lt;/span&gt; then because &lt;span class=&#34;math inline&#34;&gt;\(p(Y,\vec{X}) = p(Y|\vec{X})p(\vec{X})\)&lt;/span&gt; building the likelihood using either &lt;span class=&#34;math inline&#34;&gt;\(p(Y|\vec{X})\)&lt;/span&gt; or &lt;span class=&#34;math inline&#34;&gt;\(p(Y,\vec{X})\)&lt;/span&gt; will lead to the same maximization problem because they differ by a constant factor (constant in &lt;span class=&#34;math inline&#34;&gt;\(\beta\)&lt;/span&gt; and &lt;span class=&#34;math inline&#34;&gt;\(\sigma\)&lt;/span&gt; that is). So we will use the conditional density &lt;span class=&#34;math inline&#34;&gt;\(p(Y|\vec{X})\)&lt;/span&gt;.&lt;/p&gt;
&lt;p&gt;Because the data is assumed to be generated IID then the full likelihood of the data is&lt;/p&gt;
&lt;p&gt;&lt;span class=&#34;math display&#34;&gt;\[
\mathcal{L}(\beta, \sigma\ |\ \{ (Y_i, \vec{X}_i)\}) = \prod_{i = 1}^N p(Y_i|\vec{X}_i) = \prod_{i=1}^N\frac{1}{\sigma\sqrt{2\pi}}e^{-\frac{1}{2}\big(\frac{Y_i - \langle \vec{X}_i  , \beta\rangle}{\sigma}\big)^2} = \frac{1}{(\sigma^22\pi)^{N/2}}e^{\sum_{i=1}^N-\frac{1}{2}\big(\frac{Y_i - \langle \vec{X}_i  , \beta\rangle}{\sigma}\big)^2}
\]&lt;/span&gt;
Because the function &lt;span class=&#34;math inline&#34;&gt;\(f(x) := -\log(x)\)&lt;/span&gt; is decreasing we may instead minimize the negative of the log of this expression:
&lt;span class=&#34;math display&#34;&gt;\[
-\log(\mathcal{L}(\beta,\sigma\ |\ \{ (Y_i, \vec{X}_i)\})) = \frac{N}{2}\log(\sigma^22\pi) + \frac{1}{2\sigma^2}\sum_{i=1}^N\bigg(Y_i - \langle \vec{X}_i  , \beta\rangle\bigg)^2
\]&lt;/span&gt;
We first minimize with respect to &lt;span class=&#34;math inline&#34;&gt;\(\beta\)&lt;/span&gt; as this is necessary to do first before finding the minimizing value of &lt;span class=&#34;math inline&#34;&gt;\(\sigma\)&lt;/span&gt;. To do this we need to minimize the only term that depends on &lt;span class=&#34;math inline&#34;&gt;\(\beta\)&lt;/span&gt;, namely the sum of squares &lt;span class=&#34;math inline&#34;&gt;\(SSE(\beta) := \sum_{i=1}^N\bigg(Y_i - \langle \vec{X}_i , \beta\rangle\bigg)^2\)&lt;/span&gt; (hence Least Squares regression).&lt;/p&gt;
&lt;div id=&#34;a-geometric-interlude&#34; class=&#34;section level4&#34;&gt;
&lt;h4&gt;A geometric interlude&lt;/h4&gt;
&lt;p&gt;Before we do that, let’s think about what the expression &lt;span class=&#34;math inline&#34;&gt;\(SSE(\beta)\)&lt;/span&gt; is. The term &lt;span class=&#34;math inline&#34;&gt;\(\langle \vec{X}_i , \beta\rangle\)&lt;/span&gt; is linear in the unknowns &lt;span class=&#34;math inline&#34;&gt;\(\beta\)&lt;/span&gt;, and hence so is &lt;span class=&#34;math inline&#34;&gt;\(Y_i - \langle \vec{X}_i , \beta\rangle\)&lt;/span&gt;. Therefore, the square &lt;span class=&#34;math inline&#34;&gt;\(\bigg(Y_i - \langle \vec{X}_i , \beta\rangle\bigg)^2\)&lt;/span&gt; is quadratic in &lt;span class=&#34;math inline&#34;&gt;\(\beta\)&lt;/span&gt;. Thus since the full expression &lt;span class=&#34;math inline&#34;&gt;\(\sum_{i=1}^N\bigg(Y_i - \langle \vec{X}_i , \beta\rangle\bigg)^2\)&lt;/span&gt; is a sum of quadratic functions in &lt;span class=&#34;math inline&#34;&gt;\(\beta\)&lt;/span&gt; it too is a quadratic function in &lt;span class=&#34;math inline&#34;&gt;\(\beta\)&lt;/span&gt;. Since all terms in the sum are squares, the full sum is never negative and its graph in &lt;span class=&#34;math inline&#34;&gt;\(\beta\)&lt;/span&gt; is a &lt;a href=&#34;https://en.wikipedia.org/wiki/Paraboloid&#34;&gt;non-hyperbolic paraboloid&lt;/a&gt;. Usually such shapes look like bowls. However, some can degenerate so that they become flat in one or more directions. Here’re some examples in R:&lt;/p&gt;
&lt;p&gt;Non-degenarte paraboloids look like this:&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;nice.paraboloid = function(x,y)
{
    return(x^2+0.5*y^2)
}
x = y = seq(from = -4, to = 4, by = 0.2)
z = outer(x, y, nice.paraboloid)

persp(x, y, z,
      main=&amp;quot;Plot of a Non-degenerate 2D Paraboloid&amp;quot;,
      theta = 30, phi = 15,
      col = &amp;quot;springgreen&amp;quot;, shade = 0.5)&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src=&#34;/post/004_Regularization/main_files/figure-html/unnamed-chunk-1-1.png&#34; width=&#34;672&#34; /&gt;&lt;/p&gt;
&lt;p&gt;We can see such a paraboloid is bowl shaped. More technically it’s strictly convex, with a clear unique minimum point. However, paraboloids can degenerate so that they flatten out in some directions:&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;degenerate.paraboloid = function(x,y)
{
    return(x^2) #Does not change value as y changes
}
x = y = seq(from = -4, to = 4, by = 0.2)
z = outer(x, y, degenerate.paraboloid)

persp(x, y, z,
      main=&amp;quot;Plot of a Degenerate 2D Paraboloid&amp;quot;,
      theta = 30, phi = 15,
      col = &amp;quot;springgreen&amp;quot;, shade = 0.5)&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src=&#34;/post/004_Regularization/main_files/figure-html/unnamed-chunk-2-1.png&#34; width=&#34;672&#34; /&gt;&lt;/p&gt;
&lt;p&gt;In this example we changed the coefficient of &lt;span class=&#34;math inline&#34;&gt;\(y\)&lt;/span&gt; from 0.5 to 0. The result is that in the &lt;span class=&#34;math inline&#34;&gt;\(y\)&lt;/span&gt;-direction the paraboloid flattened out and it no longer looks bowl shaped. Instead there are infinitely many minimum points all on the axis &lt;span class=&#34;math inline&#34;&gt;\(\{(x,y): x = 0\}\)&lt;/span&gt;. Note that if instead of making the coefficient of &lt;span class=&#34;math inline&#34;&gt;\(y\)&lt;/span&gt; equal to 0 we had made it a positive number very close to zero then the mimima would become unique but would become hard to distinguish from nearby points:&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;tricky.paraboloid = function(x,y)
{
    return(x^2+ 0.05*y^2) #Notice the coefficient of y is quite small
}
x = y = seq(from = -4, to = 4, by = 0.2)
z = outer(x, y, tricky.paraboloid)

persp(x, y, z,
      main=&amp;quot;Plot of a Nearly-Degenerate 2D Paraboloid&amp;quot;,
      theta = 30, phi = 15,
      col = &amp;quot;springgreen&amp;quot;, shade = 0.5)&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src=&#34;/post/004_Regularization/main_files/figure-html/unnamed-chunk-3-1.png&#34; width=&#34;672&#34; /&gt;&lt;/p&gt;
&lt;p&gt;These pictures show what can go wrong with the minima of quadratic functions like &lt;span class=&#34;math inline&#34;&gt;\(SSE(\beta)\)&lt;/span&gt; and why regularization may be needed. Now to get back to the minimizing the sum of squares &lt;span class=&#34;math inline&#34;&gt;\(SSE(\beta) = \sum_{i=1}^N\bigg(Y_i - \langle \vec{X}_i , \beta\rangle\bigg)^2\)&lt;/span&gt;. If you’re reading this article I’m going to assume you’ve seen this derivation before so I’ll move a bit fast.&lt;/p&gt;
&lt;p&gt;First we define &lt;span class=&#34;math inline&#34;&gt;\(Y\in \mathbb{R}^{N\times 1}\)&lt;/span&gt; with &lt;span class=&#34;math inline&#34;&gt;\(i\)&lt;/span&gt;-th component equal to &lt;span class=&#34;math inline&#34;&gt;\(Y_i\)&lt;/span&gt;. (Note an abuse of notation we are making: earlier &lt;span class=&#34;math inline&#34;&gt;\(Y\)&lt;/span&gt; denoted a real valued random variable, but now we are using the same symbol to denote the vector of the &lt;span class=&#34;math inline&#34;&gt;\(N\)&lt;/span&gt; realizations of this random variable.) In addition, let &lt;span class=&#34;math inline&#34;&gt;\(X\in \mathbb{R}^{N\times p}\)&lt;/span&gt; with &lt;span class=&#34;math inline&#34;&gt;\(i\)&lt;/span&gt;-th row equal to &lt;span class=&#34;math inline&#34;&gt;\(\vec{X}_i\)&lt;/span&gt;. Then in matrix notation&lt;/p&gt;
&lt;p&gt;&lt;span class=&#34;math display&#34;&gt;\[
\sum_{i=1}^N\bigg(Y_i - \langle \vec{X}_i  , \beta\rangle\bigg)^2 = (Y - X\beta)^T(Y - X\beta)
\]&lt;/span&gt;
Let &lt;span class=&#34;math inline&#34;&gt;\(\hat{\beta} = \text{argmax}_{\beta} \ \ (Y - X\beta)^T(Y - X\beta)\)&lt;/span&gt; be the sought after minimizer. Since &lt;span class=&#34;math inline&#34;&gt;\(\hat{\beta}\)&lt;/span&gt; is a minizer in the interior of the domain of &lt;span class=&#34;math inline&#34;&gt;\(SSE(\beta)\)&lt;/span&gt;, the gradient of &lt;span class=&#34;math inline&#34;&gt;\(SSE(\beta)\)&lt;/span&gt; at &lt;span class=&#34;math inline&#34;&gt;\(\hat{\beta}\)&lt;/span&gt; must be 0:&lt;/p&gt;
&lt;p&gt;&lt;span class=&#34;math display&#34;&gt;\[
-2X^TY + 2X^TX\hat{\beta} = 0
\]&lt;/span&gt;
therefore we obtain the normal equations&lt;/p&gt;
&lt;p&gt;&lt;span class=&#34;math display&#34;&gt;\[
X^TX\hat{\beta} = X^TY
\]&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;This is basically the same linear algebra problem as before: If the inverse &lt;span class=&#34;math inline&#34;&gt;\((X^TX)^{-1}\)&lt;/span&gt; existed and was numerically nice then we can solve for &lt;span class=&#34;math inline&#34;&gt;\(\hat{\beta} = (X^TX)^{-1}X^TY\)&lt;/span&gt;. However, if this matrix inverse does not exist (as can happen when we do not have enough rows/samples for the given number of columns/unknowns) then this formula is not useful.&lt;/p&gt;
&lt;p&gt;But as before we can simply regularize by replacing the matrix &lt;span class=&#34;math inline&#34;&gt;\(X^TX\)&lt;/span&gt; by &lt;span class=&#34;math inline&#34;&gt;\(X^TX + \lambda I\)&lt;/span&gt; for some sufficiently large &lt;span class=&#34;math inline&#34;&gt;\(\lambda\)&lt;/span&gt;. Actually since &lt;span class=&#34;math inline&#34;&gt;\(X^TX\)&lt;/span&gt; is non-negative definite&lt;a href=&#34;#fn1&#34; class=&#34;footnote-ref&#34; id=&#34;fnref1&#34;&gt;&lt;sup&gt;1&lt;/sup&gt;&lt;/a&gt; and symmetric all of it’s eigenvalues are non-negative. So any &lt;span class=&#34;math inline&#34;&gt;\(\lambda &amp;gt; 0\)&lt;/span&gt; would be sufficient to shift the eigenvalues into positive numbers. Now the regularized problem becomes &lt;span class=&#34;math inline&#34;&gt;\((X^TX + \lambda I)\hat{\beta} = X^TY\)&lt;/span&gt;. Therefore we get the regularized MLE solution:&lt;/p&gt;
&lt;p&gt;&lt;span class=&#34;math display&#34;&gt;\[
\hat{\beta}_{reg} := (X^TX + \lambda I)^{-1}X^TY
\]&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;Does this regularized problem correspond to its own minimization problem? Yes! Working backwards, this new problem is equivalent to&lt;/p&gt;
&lt;p&gt;&lt;span class=&#34;math display&#34;&gt;\[
-2X^TY + 2X^TX\hat{\beta} + 2\lambda\hat{\beta}= 0
\]&lt;/span&gt;
The left had side is the gradient of &lt;span class=&#34;math inline&#34;&gt;\((Y - X\beta)^T(Y - X\beta) + \lambda\sum_{j=1}^p\beta_j^2 = (Y - X\beta)^T(Y - X\beta) + \lambda \langle \beta, \beta\rangle\)&lt;/span&gt; at &lt;span class=&#34;math inline&#34;&gt;\(\beta = \hat{\beta}\)&lt;/span&gt; as can be checked. So the regularized problem corresponds to trying to minimize the expression &lt;span class=&#34;math inline&#34;&gt;\((Y - X\beta)^T(Y - X\beta) + \lambda\sum_{j=1}^p\beta_j^2 = (Y - X\beta)^T(Y - X\beta) + \lambda \langle \beta, \beta\rangle\)&lt;/span&gt;. This of course is &lt;span class=&#34;math inline&#34;&gt;\(L^2\)&lt;/span&gt;-regularization. Thus we have derived &lt;span class=&#34;math inline&#34;&gt;\(L^2\)&lt;/span&gt;-regularization for OLS simply by seeking to transform the inverse problem that arises in OLS so that it may satisfy the Hadamard conditions.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div id=&#34;an-illustrative-example&#34; class=&#34;section level3&#34;&gt;
&lt;h3&gt;An Illustrative Example&lt;/h3&gt;
&lt;p&gt;Below we can see geometrically what regularization does. The sum of squares expression &lt;span class=&#34;math inline&#34;&gt;\((Y - X\beta)^T(Y - X\beta)\)&lt;/span&gt; is quadratic in &lt;span class=&#34;math inline&#34;&gt;\(\beta\)&lt;/span&gt;, but may have a graph that is a degenerate paraboloid. This is what causes it to have multiple minimizers in OLS and what makes the matrix &lt;span class=&#34;math inline&#34;&gt;\(X^TX\)&lt;/span&gt; singular (more on this point in the next section). However the expression &lt;span class=&#34;math inline&#34;&gt;\(\lambda\langle \beta, \beta\rangle = \lambda\sum_{j = 1}^p\beta_j^2\)&lt;/span&gt; is a strictly positive-definite quadratic form. Its graph is a non-degenerate bowl shaped paraboloid.&lt;/p&gt;
&lt;p&gt;Adding a non-degenerate paraboloid to something that is not bowl shaped makes the second graph more bowl shaped! Moreover it shifts the minimum of the 2nd graph towards the mimimum of the bowl. As an illustration, let’s take a look at an example where this is easy to see.&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;rm(list = ls())
bumpy.function = function(x,y)
{
    return(sin(x)+sin(y))
}

nice.paraboloid = function(x,y)
{
    return(0.15*(x^2 + y^2)) #lambda = 0.15 is used
}

x = y = seq(from = -4, to = 4, by = 0.2)
bumpy = outer(x, y, bumpy.function)
paraboloid = outer(x, y, nice.paraboloid)
bumpy.plus.paraboloid = bumpy + paraboloid

persp(x, y, bumpy,
      main=&amp;quot;Graph of a bumpy function with multiple minima&amp;quot;,
      theta = 30, phi = 15,
      col = &amp;quot;springgreen&amp;quot;, shade = 0.5)&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src=&#34;/post/004_Regularization/main_files/figure-html/unnamed-chunk-4-1.png&#34; width=&#34;672&#34; /&gt;&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;persp(x, y, paraboloid,
      main=&amp;quot;Graph of a nice paraboloid&amp;quot;,
      theta = 30, phi = 15,
      col = &amp;quot;springgreen&amp;quot;, shade = 0.5)&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src=&#34;/post/004_Regularization/main_files/figure-html/unnamed-chunk-4-2.png&#34; width=&#34;672&#34; /&gt;&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;persp(x, y, bumpy.plus.paraboloid,
      main=&amp;quot;Graph of a regularized bumpy function = bumpy function + paraboloid&amp;quot;,
      theta = 30, phi = 15,
      col = &amp;quot;springgreen&amp;quot;, shade = 0.5)&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src=&#34;/post/004_Regularization/main_files/figure-html/unnamed-chunk-4-3.png&#34; width=&#34;672&#34; /&gt;&lt;/p&gt;
&lt;p&gt;Here we see that the most important geometric aspect of the regularizing term &lt;span class=&#34;math inline&#34;&gt;\(\lambda\langle\beta, \beta\rangle\)&lt;/span&gt; is the fact that it is &lt;a href=&#34;https://en.wikipedia.org/wiki/Convex_function&#34;&gt;strictly convex&lt;/a&gt;!! &lt;strong&gt;&lt;em&gt;Although we will not dwell on it, it is impossible to overstate the theoretical importance of the previous sentence.&lt;/em&gt;&lt;/strong&gt; As a matter of fact, geometrically speaking it’s clear that had we added &lt;strong&gt;any&lt;/strong&gt; strictly convex function to the bumpy function we would have gotten something more bowl shaped. We will not go further into it here but you should know that &lt;a href=&#34;https://en.wikipedia.org/wiki/Convex_analysis&#34;&gt;convexity is one of those properties in mathematics out of which entire fields are created&lt;/a&gt;.&lt;/p&gt;
&lt;/div&gt;
&lt;div id=&#34;the-hessian-matrix-and-more-complex-models&#34; class=&#34;section level3&#34;&gt;
&lt;h3&gt;The Hessian matrix and more complex models&lt;/h3&gt;
&lt;p&gt;In the OLS problem above the Maximum Likelihood estimator turned out to be the one that minimized the sum of squares expression &lt;span class=&#34;math inline&#34;&gt;\(SSE(\beta) := (Y - X\beta)^T(Y - X\beta)\)&lt;/span&gt;. This expression can be expanded in matrix notation as&lt;/p&gt;
&lt;p&gt;&lt;span class=&#34;math display&#34;&gt;\[
Y^TY - Y^TX\beta - \beta^TX^TY + \beta^TX^TX\beta
\]&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;We see that there is a quadratic term (&lt;span class=&#34;math inline&#34;&gt;\(\beta^TX^TX\beta\)&lt;/span&gt;) and the rest are terms with powers of &lt;span class=&#34;math inline&#34;&gt;\(\beta\)&lt;/span&gt; less than 2. The matrix of second derivatives of this expression (known as the &lt;a href=&#34;https://en.wikipedia.org/wiki/Hessian_matrix&#34;&gt;Hessian matrix&lt;/a&gt;) is therefore just the matrix of coefficients of this quadratic term: &lt;span class=&#34;math inline&#34;&gt;\(X^TX\)&lt;/span&gt;. This Hessian is exactly what was the star of the show in the OLS problem!&lt;/p&gt;
&lt;p&gt;The Hessian of a function at a point tells us the convexity of the function at the point. &lt;a href=&#34;https://en.wikipedia.org/wiki/Second_partial_derivative_test&#34;&gt;If the Hessian is positive definite, then near the minimizing point the function is bowl shaped. If the Hessian is negative definite then near a maximizing point the function is shaped like an upside down bowl.&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Moreover, The Hessian is always a symmetric matrix by the &lt;a href=&#34;https://en.wikipedia.org/wiki/Symmetry_of_second_derivatives#Formal_expressions_of_symmetry&#34;&gt;equality of cross-derivatives&lt;/a&gt;. So the previous point is really a statement about Hessian’s eigenvalues. In short, if the Hessian has all positive eigenvalues then it is positive definite and the function is bowl shaped near its minimizer.&lt;/p&gt;
&lt;p&gt;The OLS Hessian matrix &lt;span class=&#34;math inline&#34;&gt;\(X^TX\)&lt;/span&gt; is symmetric and non-negative definite, so the graph of the sum of squares &lt;span class=&#34;math inline&#34;&gt;\(SSE(\beta) := (Y - X\beta)^T(Y - X\beta)\)&lt;/span&gt; can only fail to be bowl shaped near the minimizer &lt;span class=&#34;math inline&#34;&gt;\(\hat{\beta}\)&lt;/span&gt; if the matrix &lt;span class=&#34;math inline&#34;&gt;\(X^TX\)&lt;/span&gt; has eigenvalues that are equal 0 (or positive but close to 0 in the case numerical instability). In which case, the graph of &lt;span class=&#34;math inline&#34;&gt;\(SSE(\beta)\)&lt;/span&gt; is a degenerate non-hyperbolic paraboloid and there are multiple minimizing solutions &lt;span class=&#34;math inline&#34;&gt;\(\beta\)&lt;/span&gt;.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Thus regularizing the matrix &lt;span class=&#34;math inline&#34;&gt;\(X^TX\)&lt;/span&gt; is just regularizing the Hessian matrix of the function &lt;span class=&#34;math inline&#34;&gt;\(SSE(\beta)\)&lt;/span&gt; we want to minimize!!&lt;/strong&gt; This fact is what allows us to take the idea beyond OLS.&lt;/p&gt;
&lt;p&gt;Indeed if &lt;span class=&#34;math inline&#34;&gt;\(f(\beta)\)&lt;/span&gt; is any 2nd order differentiable cost function in any machine learning model then by the linearity of the derivative&lt;/p&gt;
&lt;p&gt;&lt;span class=&#34;math display&#34;&gt;\[
\text{Hessian}(f + \lambda \langle \beta, \beta\rangle) = \text{Hessian}(f) + \lambda\text{Hessian}(\langle \beta, \beta\rangle) = \text{Hessian}(f) + \lambda I
\]&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;There we used the fact that &lt;span class=&#34;math inline&#34;&gt;\(\text{Hessian}(\langle \beta, \beta\rangle) = \text{Hessian}(\sum_i^p \beta_i^2) = I\)&lt;/span&gt;. Because &lt;span class=&#34;math inline&#34;&gt;\(f\)&lt;/span&gt; is almost arbitrary we see that we can apply &lt;span class=&#34;math inline&#34;&gt;\(L^2\)&lt;/span&gt;-regularization to a very large family of problems, with the goal being to regularize the Hessian of &lt;span class=&#34;math inline&#34;&gt;\(f\)&lt;/span&gt;. As an example let’s look at some other kinds of regression problems. For OLS we assumed the conditional distribution &lt;span class=&#34;math inline&#34;&gt;\(Y \ \ | \ \ \vec{X} \sim \mathcal{N}(\ \langle \vec{X} , \beta\rangle \ ,\ \sigma^2)\)&lt;/span&gt;, but we may have chosen a different conditional distribution.&lt;/p&gt;
&lt;p&gt;If &lt;span class=&#34;math inline&#34;&gt;\(Y\)&lt;/span&gt; takes on only values in the set &lt;span class=&#34;math inline&#34;&gt;\(\{0,1\}\)&lt;/span&gt; then it is a Bernoulli random variable. This is the case in logistic regression where the conditional distribution of &lt;span class=&#34;math inline&#34;&gt;\(Y\)&lt;/span&gt; given &lt;span class=&#34;math inline&#34;&gt;\(\vec{X}\)&lt;/span&gt; is
&lt;span class=&#34;math display&#34;&gt;\[
Y \ \ | \ \ \vec{X} \sim \mathcal{B}(\ p = \phi(\langle \vec{X}  , \beta\rangle) \ )
\]&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;where &lt;span class=&#34;math inline&#34;&gt;\(\mathcal{B(p)}\)&lt;/span&gt; is a Bernoulli distribution with probability of a positive event equal to &lt;span class=&#34;math inline&#34;&gt;\(p\)&lt;/span&gt;, &lt;span class=&#34;math inline&#34;&gt;\(p = \text{E}[Y|\vec{X}] = \phi(\langle \vec{X} , \beta\rangle)\)&lt;/span&gt; is the probability of a positive event given &lt;span class=&#34;math inline&#34;&gt;\(\vec{X}\)&lt;/span&gt;, and &lt;span class=&#34;math inline&#34;&gt;\(\phi(t) = \frac{e^t}{1+e^t}\)&lt;/span&gt; is the standard logit. In this case the conditional density &lt;span class=&#34;math inline&#34;&gt;\(p(Y|\vec{X})\)&lt;/span&gt; can be written as&lt;/p&gt;
&lt;p&gt;&lt;span class=&#34;math display&#34;&gt;\[
p(Y|\vec{X}) = p^Y\big(1 - p)\big)^{1-Y} =\phi(\langle \vec{X}  , \beta\rangle)^Y\big(1 - \phi(\langle \vec{X}  , \beta\rangle)\big)^{1-Y}
\]&lt;/span&gt;
So the negative log-likelihood is given by&lt;/p&gt;
&lt;p&gt;&lt;span class=&#34;math display&#34;&gt;\[
-\mathcal{l}(\beta) = -\sum_{i=1}^N Y_i\log(\phi(\langle \vec{X}_i  , \beta\rangle)) + (1-Y_i)\log(1-\phi(\langle \vec{X}_i  , \beta\rangle))
\]&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;This function may or may not look bowl shaped (i.e. strictly convex) near the &lt;span class=&#34;math inline&#34;&gt;\(\hat{\beta}\)&lt;/span&gt; that minimizes it. In case it doesn’t we can make it so by adding &lt;span class=&#34;math inline&#34;&gt;\(\lambda \langle \beta, \beta\rangle = \lambda\sum_{j = 1}^p\beta_j^2\)&lt;/span&gt; for some sufficiently large &lt;span class=&#34;math inline&#34;&gt;\(\lambda\)&lt;/span&gt; and minimizing this new problem. The same applies to generalized linear models, neural networks, etc.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div id=&#34;bias-variance-trade-offs-and-regularization&#34; class=&#34;section level2&#34;&gt;
&lt;h2&gt;Bias-Variance trade offs and Regularization&lt;/h2&gt;
&lt;p&gt;Above we used regularization methods to make a problem “nicer” in the numerical sense (i.e. satisfying Hadamard’s conditions). But what does “nicer” mean in the statistical context? That is a multifaceted question. The first step is to recognize that what might be viewed as instability from the numerical point of view, can be understood as high variance from the statistical point of view.&lt;/p&gt;
&lt;p&gt;We illustrate with the OLS estimator. Suppose that the matrix &lt;span class=&#34;math inline&#34;&gt;\(X^TX\)&lt;/span&gt; is indeed invertible. The standard OLS estimator is the random vector given by the normal equations:&lt;/p&gt;
&lt;p&gt;&lt;span class=&#34;math display&#34;&gt;\[
\hat{\beta} = (X^TX)^{-1}X^TY
\]&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;We see that this is an unbiased estimator of &lt;span class=&#34;math inline&#34;&gt;\(\beta\)&lt;/span&gt;:&lt;/p&gt;
&lt;p&gt;&lt;span class=&#34;math display&#34;&gt;\[
\text{E}[\hat{\beta}] = \text{E}\big[\text{E}[\hat{\beta}|X]\big] = \text{E}\bigg[(X^TX)^{-1}X^T\text{E}[Y|X]\bigg] = \text{E}\bigg[(X^TX)^{-1}X^TX\beta\bigg] = \text{E}[\beta] = \beta
\]&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;Moreover, it’s easy enough to compute the conditional covariance matrix of &lt;span class=&#34;math inline&#34;&gt;\(\hat{\beta}\)&lt;/span&gt;:
&lt;span class=&#34;math display&#34;&gt;\[
\text{Var}[\hat{\beta}|X] = (X^TX)^{-1}X^T\cdot \text{Var}[Y|X] \cdot X(X^TX)^{-1} = (X^TX)^{-1}X^T\cdot \sigma^2 I \cdot X(X^TX)^{-1} 
\]&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span class=&#34;math display&#34;&gt;\[
= \sigma^2 (X^TX)^{-1}
\]&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;The &lt;a href=&#34;https://en.wikipedia.org/wiki/Law_of_total_variance&#34;&gt;unconditional covariance matrix can be computed as&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;span class=&#34;math display&#34;&gt;\[
\text{Var}[\hat{\beta}] = \text{E}[\text{Var}[\hat{\beta}|X]] + \text{Var}[\text{E}[\hat{\beta}|X]] 
\]&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span class=&#34;math display&#34;&gt;\[
= \sigma^2\text{E}[(X^TX)^{-1}] + \text{Var}[\beta] = \sigma^2\text{E}[(X^TX)^{-1}]
\]&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;This is harder to compute because it depends on the distribution of the random matrix &lt;span class=&#34;math inline&#34;&gt;\(X\)&lt;/span&gt;. Regardless, we can see that what controls the variance of the estimator &lt;span class=&#34;math inline&#34;&gt;\(\hat{\beta}\)&lt;/span&gt; (whether conditional or not) is the inverse matrix &lt;span class=&#34;math inline&#34;&gt;\((X^TX)^{-1}\)&lt;/span&gt;. This is interesting because it shows that the matrix we identified as the Hessian of the OLS cost function (&lt;span class=&#34;math inline&#34;&gt;\(X^TX\)&lt;/span&gt;) is also the matrix that controls the covariance of the OLS estimator.&lt;a href=&#34;#fn2&#34; class=&#34;footnote-ref&#34; id=&#34;fnref2&#34;&gt;&lt;sup&gt;2&lt;/sup&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;If any of the eigenvalues of the matrix &lt;span class=&#34;math inline&#34;&gt;\(X^TX\)&lt;/span&gt; were “close” to &lt;span class=&#34;math inline&#34;&gt;\(0\)&lt;/span&gt; then the eigenvalues of the inverse will be very large, causing the variance of &lt;span class=&#34;math inline&#34;&gt;\(\hat{\beta}\)&lt;/span&gt; to be very large. If you’re familiar with VIFs, this is what causes large &lt;a href=&#34;https://en.wikipedia.org/wiki/Variance_inflation_factor&#34;&gt;variance inflation factors&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;Regularization is used to reduce the variance in this estimator. If we denote the regularized estimator by:
&lt;span class=&#34;math display&#34;&gt;\[
\hat{\beta}_{reg} = (X^TX + \lambda I)^{-1}X^TY
\]&lt;/span&gt;
Then this estimator is biased away from &lt;span class=&#34;math inline&#34;&gt;\(\beta\)&lt;/span&gt;. To see this we first compute the conditional mean:&lt;/p&gt;
&lt;p&gt;&lt;span class=&#34;math display&#34;&gt;\[
\text{E}[\hat{\beta}_{reg}|X] = (X^TX + \lambda I)^{-1}X^TX\beta
\]&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span class=&#34;math display&#34;&gt;\[
= (X^TX + \lambda I)^{-1}(X^TX + \lambda I)\beta - \lambda (X^TX + \lambda I)^{-1}\beta
\]&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span class=&#34;math display&#34;&gt;\[
= \beta - \lambda (X^TX + \lambda I)^{-1}\beta
\]&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;Hence
&lt;span class=&#34;math display&#34;&gt;\[
\text{E}[\hat{\beta}_{reg}] = \beta - \lambda\text{E}\big[(X^TX + \lambda I)^{-1}\big]\beta
\]&lt;/span&gt;
which is “&lt;span class=&#34;math inline&#34;&gt;\(\beta\)&lt;/span&gt; minus something” and hence not equal to &lt;span class=&#34;math inline&#34;&gt;\(\beta\)&lt;/span&gt;. However the effect on the variance is better:&lt;/p&gt;
&lt;p&gt;&lt;span class=&#34;math display&#34;&gt;\[
\text{Var}[\hat{\beta}_{reg}|X] = (X^TX + \lambda I)^{-1}X^T\cdot\text{Var}[Y|X]\cdot X(X^TX + \lambda I)^{-1}
\]&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span class=&#34;math display&#34;&gt;\[
= \sigma^2(X^TX + \lambda I)^{-1}X^TX(X^TX + \lambda I)^{-1}
\]&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span class=&#34;math display&#34;&gt;\[
= \sigma^2(X^TX + \lambda I)^{-1}(X^TX+\lambda I)(X^TX + \lambda I)^{-1} - \sigma^2\lambda(X^TX + \lambda I)^{-2}
\]&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span class=&#34;math display&#34;&gt;\[
=  \sigma^2(X^TX + \lambda I)^{-1} - \sigma^2\lambda(X^TX + \lambda I)^{-2}
\]&lt;/span&gt;
This variance formula may look messy but the gist is that instead of inverting &lt;span class=&#34;math inline&#34;&gt;\(X^TX\)&lt;/span&gt; we are inverting &lt;span class=&#34;math inline&#34;&gt;\(X^TX + \lambda I\)&lt;/span&gt;. The matrix &lt;span class=&#34;math inline&#34;&gt;\(X^TX + \lambda I\)&lt;/span&gt; has larger eigenvalues than the matrix &lt;span class=&#34;math inline&#34;&gt;\(X^TX\)&lt;/span&gt;. Therefore &lt;span class=&#34;math inline&#34;&gt;\(\text{Var}[\hat{\beta}_{reg}|X] = \sigma^2(X^TX + \lambda I)^{-1} - \sigma^2\lambda(X^TX + \lambda I)^{-2}\)&lt;/span&gt; is smaller than &lt;span class=&#34;math inline&#34;&gt;\(\text{Var}[\hat{\beta}|X] = \sigma^2 (X^TX)^{-1}\)&lt;/span&gt; in the sense that it has smaller eigenvalues. &lt;strong&gt;Thus regularization has increased bias, but reduced variance.&lt;/strong&gt; Similar effects hold for more complex models than OLS, but instead of chasing formulas the read should try cooking up some numerical examples via Monte Carlo.&lt;/p&gt;
&lt;/div&gt;
&lt;div id=&#34;what-about-the-bayesian-view-point&#34; class=&#34;section level2&#34;&gt;
&lt;h2&gt;What about the Bayesian view point?&lt;/h2&gt;
&lt;p&gt;A very natural perspective on regularization can be found in Bayesian modeling, where regularization terms amount to simply specifying prior distributions. However, this is standard Bayesian theory and this post is already long enough :P&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&#34;footnotes&#34;&gt;
&lt;hr /&gt;
&lt;ol&gt;
&lt;li id=&#34;fn1&#34;&gt;&lt;p&gt;Indeed suppose &lt;span class=&#34;math inline&#34;&gt;\(v\in \mathbb{R}^p\)&lt;/span&gt; is any vector. Then &lt;span class=&#34;math inline&#34;&gt;\(\langle v, X^TXv\rangle = \langle Xv,Xv\rangle = ||Xv||^2 \ge 0\)&lt;/span&gt;. Hence &lt;span class=&#34;math inline&#34;&gt;\(X^TX\)&lt;/span&gt; is always non-negative definite.&lt;a href=&#34;#fnref1&#34; class=&#34;footnote-back&#34;&gt;↩︎&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li id=&#34;fn2&#34;&gt;&lt;p&gt;This is a general feature of Maximum Likelihood estimators called “&lt;em&gt;asymptotic efficiency&lt;/em&gt;”, where the covariance matrix of the MLE estimator approaches a “best possible” covariance matrix. Essentially the best possible covariance matrix that an unbiased estimator of &lt;span class=&#34;math inline&#34;&gt;\(\beta\)&lt;/span&gt; can have is given given by the &lt;a href=&#34;https://en.wikipedia.org/wiki/Cram%C3%A9r%E2%80%93Rao_bound&#34;&gt;Cramer-Rao Bound&lt;/a&gt; and is equal to the inverse of the &lt;a href=&#34;https://en.wikipedia.org/wiki/Fisher_information&#34;&gt;Fisher Information matrix&lt;/a&gt;, whose &lt;span class=&#34;math inline&#34;&gt;\(ij\)&lt;/span&gt;-component is &lt;span class=&#34;math inline&#34;&gt;\(-\text{E}[\partial^2\log(p(Y, \vec{X}| \beta))/\partial \beta_i\partial \beta_j]\)&lt;/span&gt;. The beauty is that the Hessian of the negative loglikelihood is the sample estimator of this Fisher Information (where expectation is replaced by average over samples).&lt;a href=&#34;#fnref2&#34; class=&#34;footnote-back&#34;&gt;↩︎&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;/div&gt;
</description>
    </item>
    
    <item>
      <title>Expectation Maximization, Part 1: Motivation and Recipe</title>
      <link>/post/003_em1/main/</link>
      <pubDate>Wed, 01 Jul 2020 00:00:00 +0000</pubDate>
      <guid>/post/003_em1/main/</guid>
      <description>


&lt;div id=&#34;introduction&#34; class=&#34;section level2&#34;&gt;
&lt;h2&gt;Introduction&lt;/h2&gt;
&lt;p&gt;This is the first in a series of posts on Expectation Maximization (EM) type algorithms. Our goal will be to motivate some of the theory behind these algorithms. In later posts we will implement examples in C++, often with the help of the &lt;a href=&#34;http://eigen.tuxfamily.org/index.php?title=Main_Page&#34;&gt;Eigen&lt;/a&gt; linear algebra library.&lt;/p&gt;
&lt;/div&gt;
&lt;div id=&#34;maximum-likelihood&#34; class=&#34;section level2&#34;&gt;
&lt;h2&gt;Maximum likelihood&lt;/h2&gt;
&lt;p&gt;A large subset of statistics is concerned with determining properties of a distribution by using data that is assumed to be generated by that distribution. A common example is &lt;a href=&#34;https://en.wikipedia.org/wiki/Maximum_likelihood_estimation&#34;&gt;Maximum Likelihood Estimation&lt;/a&gt; (MLE). Here one assumes that a vector of observed data &lt;span class=&#34;math inline&#34;&gt;\(\vec{x}\in\mathbb{R}^N\)&lt;/span&gt; is the realization of a random vector &lt;span class=&#34;math inline&#34;&gt;\(\vec{X}\)&lt;/span&gt; with a probability density &lt;span class=&#34;math inline&#34;&gt;\(p(\vec{X} \ | \ \theta)\)&lt;/span&gt; that depends on a vector of parameters &lt;span class=&#34;math inline&#34;&gt;\(\theta\)&lt;/span&gt;. MLE amounts to estimating &lt;span class=&#34;math inline&#34;&gt;\(\theta\)&lt;/span&gt; with the value that makes this probability density has high as possible for the observed data:&lt;/p&gt;
&lt;p&gt;&lt;span class=&#34;math display&#34;&gt;\[
\hat{\theta} := \text{argmax}_{\theta} \ \ p(\vec{x} \ | \ \theta)
\]&lt;/span&gt;
As a function of &lt;span class=&#34;math inline&#34;&gt;\(\theta\)&lt;/span&gt;, the density &lt;span class=&#34;math inline&#34;&gt;\(\mathcal{L}(\theta; \vec{x}) := p(\vec{x} \ | \ \theta)\)&lt;/span&gt; is called the likelihood. Because probability densities are positive for the realized values &lt;span class=&#34;math inline&#34;&gt;\(\vec{x}\)&lt;/span&gt; of &lt;span class=&#34;math inline&#34;&gt;\(\vec{X}\)&lt;/span&gt;, the above problem is equivalent to maximizing the logarithm of the likelihood:
&lt;span class=&#34;math display&#34;&gt;\[
\hat{\theta} := \text{argmax}_{\theta} \ \ \log(p(\vec{x} \ | \ \theta))
\]&lt;/span&gt;
(The main practical reason behind this log transformation is that it often makes the problem easier numerically. The theoretical advantage is that it ties MLE to the theory of the &lt;a href=&#34;https://en.wikipedia.org/wiki/Fisher_information&#34;&gt;Fisher Information&lt;/a&gt;).&lt;/p&gt;
&lt;/div&gt;
&lt;div id=&#34;dependence-structures-and-problems-with-hidden-variables&#34; class=&#34;section level2&#34;&gt;
&lt;h2&gt;Dependence structures and problems with hidden variables&lt;/h2&gt;
&lt;p&gt;The situation in the last section can be summarized by the simple dependence structure (or &lt;em&gt;Markov&lt;/em&gt; diagram) &lt;span class=&#34;math inline&#34;&gt;\(\theta \to \vec{X}\)&lt;/span&gt;. That is, given the value of &lt;span class=&#34;math inline&#34;&gt;\(\theta\)&lt;/span&gt; we can determined the distribution of &lt;span class=&#34;math inline&#34;&gt;\(\vec{X}\)&lt;/span&gt;, namely &lt;span class=&#34;math inline&#34;&gt;\(p(\vec{X} \ | \ \theta)\)&lt;/span&gt;.&lt;/p&gt;
&lt;p&gt;However, in many applications we may only have partial observations of the data we want, with some of the relevant information remaining unobserved/hidden. For example, suppose 100 identical and independent dice are thrown in an experiment. The dice are not necessarily uniformly weighted, with probabilities of landing 1,2,…,6 given by &lt;span class=&#34;math inline&#34;&gt;\(\theta = [p_1, p_2,...,p_6]\)&lt;/span&gt;. Suppose the dice land with values represented by &lt;span class=&#34;math inline&#34;&gt;\(\vec{X} = [X_1, X_2, ... X_{100}]\)&lt;/span&gt; with &lt;span class=&#34;math inline&#34;&gt;\(X_i\)&lt;/span&gt; being the number the &lt;span class=&#34;math inline&#34;&gt;\(i^{th}\)&lt;/span&gt; die lands on. Suppose also that in the experiment we are only able to observe whether each die landed on an even or odd number. That is, we observe a vector &lt;span class=&#34;math inline&#34;&gt;\(\vec{Y}\)&lt;/span&gt; given by&lt;/p&gt;
&lt;p&gt;&lt;span class=&#34;math display&#34;&gt;\[
Y_i = X_i \mod 2
\]&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;for &lt;span class=&#34;math inline&#34;&gt;\(i \in \{1, 2, ... 100\}\)&lt;/span&gt;. In this case the dependence structure is a little more complex: &lt;span class=&#34;math inline&#34;&gt;\(\theta \to \vec{X} \to \vec{Y}\)&lt;/span&gt;. That is, once we know the value of &lt;span class=&#34;math inline&#34;&gt;\(\vec{X}\)&lt;/span&gt; we can fully specify the distribution of &lt;span class=&#34;math inline&#34;&gt;\(\vec{Y}\)&lt;/span&gt; without knowing the value of &lt;span class=&#34;math inline&#34;&gt;\(\theta\)&lt;/span&gt;. We would have the Markov property for densities:&lt;/p&gt;
&lt;p&gt;&lt;span class=&#34;math display&#34;&gt;\[
p(\vec{y} \ | \ \vec{x}, \theta) = p(\vec{y} \ | \ \vec{x})
\]&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;In general, we have a dependence structure given by &lt;span class=&#34;math inline&#34;&gt;\(\theta \to \vec{X} \to \vec{Y}\)&lt;/span&gt;, we observe only &lt;span class=&#34;math inline&#34;&gt;\(\vec{Y}=\vec{y}\)&lt;/span&gt; and we want to estimate the parameters &lt;span class=&#34;math inline&#34;&gt;\(\theta\)&lt;/span&gt;. The MLE estimator would be:
&lt;span class=&#34;math display&#34;&gt;\[
\hat{\theta} := \text{argmax}_{\theta} \ \ \log(p(\vec{y} \ | \ \theta))
\]&lt;/span&gt;
All of the theory of MLE applies in this case. In the example above this would be relatively easy. However, there are times this maximization problem is very difficult. Often the density &lt;span class=&#34;math inline&#34;&gt;\(p(\vec{y} \ | \ \theta)\)&lt;/span&gt; may be much more complicated than the density &lt;span class=&#34;math inline&#34;&gt;\(p(\vec{x} \ | \ \theta)\)&lt;/span&gt; of the hidden data that we wish we had.&lt;/p&gt;
&lt;p&gt;In such as situation, if we knew &lt;span class=&#34;math inline&#34;&gt;\(\vec{x}\)&lt;/span&gt; then we can replace the above problem with &lt;span class=&#34;math inline&#34;&gt;\(\hat{\theta} := \text{argmax}_{\theta} \ \ \log(p(\vec{x} \ | \ \theta))\)&lt;/span&gt;. In fact, we wouldn’t even need to know exactly what the value of &lt;span class=&#34;math inline&#34;&gt;\(\vec{x}\)&lt;/span&gt; is but only what the value of &lt;span class=&#34;math inline&#34;&gt;\(\log(p(\vec{x} \ | \ \theta))\)&lt;/span&gt; is for a given &lt;span class=&#34;math inline&#34;&gt;\(\theta\)&lt;/span&gt;.&lt;/p&gt;
&lt;/div&gt;
&lt;div id=&#34;a-general-recipe-for-em-algorithms&#34; class=&#34;section level2&#34;&gt;
&lt;h2&gt;A general recipe for EM algorithms&lt;/h2&gt;
&lt;p&gt;The idea of EM is indeed to try and maximize &lt;span class=&#34;math inline&#34;&gt;\(\log(p(\vec{x} \ | \ \theta))\)&lt;/span&gt; instead of &lt;span class=&#34;math inline&#34;&gt;\(\log(p(\vec{y} \ | \ \theta))\)&lt;/span&gt;, but because we do not know &lt;span class=&#34;math inline&#34;&gt;\(\log(p(\vec{x} \ | \ \theta))\)&lt;/span&gt; to instead use an approximation/estimate of it.&lt;/p&gt;
&lt;p&gt;How to approximate such an expression? The quantity &lt;span class=&#34;math inline&#34;&gt;\(\log(p(\vec{x} \ | \ \theta))\)&lt;/span&gt; is a random variable (depending on the unknown value &lt;span class=&#34;math inline&#34;&gt;\(\vec{x}\)&lt;/span&gt; of &lt;span class=&#34;math inline&#34;&gt;\(\vec{X}\)&lt;/span&gt;). To estimate it in a meaningful way we need to use the most informative distribution related to &lt;span class=&#34;math inline&#34;&gt;\(\vec{x}\)&lt;/span&gt;. Because we know &lt;span class=&#34;math inline&#34;&gt;\(\vec{y}\)&lt;/span&gt; the best such distribution is &lt;span class=&#34;math inline&#34;&gt;\(p(\vec{x}|\vec{y},\theta)\)&lt;/span&gt;.&lt;/p&gt;
&lt;p&gt;The problem is this distribution (or any other) will necessarily depend &lt;span class=&#34;math inline&#34;&gt;\(\theta\)&lt;/span&gt;, which we do not know! At first this seems like a circular trap, because to estimate &lt;span class=&#34;math inline&#34;&gt;\(\log(p(\vec{x} \ | \ \theta))\)&lt;/span&gt; using &lt;span class=&#34;math inline&#34;&gt;\(p(\vec{x}|\vec{y},\theta)\)&lt;/span&gt; we need to know &lt;span class=&#34;math inline&#34;&gt;\(\theta\)&lt;/span&gt;, but to estimate &lt;span class=&#34;math inline&#34;&gt;\(\theta\)&lt;/span&gt; we need to know &lt;span class=&#34;math inline&#34;&gt;\(\log(p(\vec{x} \ | \ \theta))\)&lt;/span&gt;. However the trap hints at a solution: simply alternate between estimating the random variable &lt;span class=&#34;math inline&#34;&gt;\(\log(p(\vec{x} \ | \ \theta))\)&lt;/span&gt; using a current guess of &lt;span class=&#34;math inline&#34;&gt;\(\theta\)&lt;/span&gt; and then use this updated estimate of &lt;span class=&#34;math inline&#34;&gt;\(\log(p(\vec{x} \ | \ \theta))\)&lt;/span&gt; to update our guess of &lt;span class=&#34;math inline&#34;&gt;\(\theta\)&lt;/span&gt;. More formally we can summarize EM in 5 steps:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;Step 1:&lt;/strong&gt; Let &lt;span class=&#34;math inline&#34;&gt;\(m = 0\)&lt;/span&gt;. Make an initial estimate &lt;span class=&#34;math inline&#34;&gt;\(\theta_m\)&lt;/span&gt; for &lt;span class=&#34;math inline&#34;&gt;\(\theta\)&lt;/span&gt;.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;Step 2:&lt;/strong&gt; Given the observed data &lt;span class=&#34;math inline&#34;&gt;\(\vec{y}\)&lt;/span&gt; and pretending for the moment that our current guess &lt;span class=&#34;math inline&#34;&gt;\(\theta_m\)&lt;/span&gt; is correct, construct the conditional probability distribution &lt;span class=&#34;math inline&#34;&gt;\(p(\vec{x}|\vec{y},\theta_m)\)&lt;/span&gt; of the hidden data &lt;span class=&#34;math inline&#34;&gt;\(\vec{x}\)&lt;/span&gt; given all known information.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;Step 3:&lt;/strong&gt; Using the distribution &lt;span class=&#34;math inline&#34;&gt;\(p(\vec{x}|\vec{y},\theta_m)\)&lt;/span&gt; construct an estimator/approximation of the desired log-likelihood &lt;span class=&#34;math inline&#34;&gt;\(\log(p(\vec{x} \ | \ \theta))\)&lt;/span&gt; for arbitrary &lt;span class=&#34;math inline&#34;&gt;\(\theta\)&lt;/span&gt;. We denote this approximation by &lt;span class=&#34;math inline&#34;&gt;\(Q(\theta|\theta_m)\)&lt;/span&gt;.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;Step 4:&lt;/strong&gt; Set &lt;span class=&#34;math inline&#34;&gt;\(\theta_{m+1}\)&lt;/span&gt; equal to a value of &lt;span class=&#34;math inline&#34;&gt;\(\theta\)&lt;/span&gt; that maximizes the current approximation &lt;span class=&#34;math inline&#34;&gt;\(Q(\theta|\theta_m)\)&lt;/span&gt; of &lt;span class=&#34;math inline&#34;&gt;\(\log(p(\vec{x} \ | \ \theta))\)&lt;/span&gt;.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;Step 5:&lt;/strong&gt; Return to step 2 and repeat until some stopping criteria is met.&lt;a href=&#34;#fn1&#34; class=&#34;footnote-ref&#34; id=&#34;fnref1&#34;&gt;&lt;sup&gt;1&lt;/sup&gt;&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Practically speaking, this algorithm would be applied when each of these steps is significantly easier than the original MLE problem of &lt;span class=&#34;math inline&#34;&gt;\(\hat{\theta} := \text{argmax}_{\theta} \ \ \log(p(\vec{y} \ | \ \theta))\)&lt;/span&gt;. As a general example, this is often the case when the model is linear with respect to &lt;span class=&#34;math inline&#34;&gt;\(\vec{X}\)&lt;/span&gt;, but the information loss of going from &lt;span class=&#34;math inline&#34;&gt;\(\vec{X}\)&lt;/span&gt; to &lt;span class=&#34;math inline&#34;&gt;\(\vec{Y}\)&lt;/span&gt; is nonlinear and non-invertible (we’ll give examples in later posts).&lt;/p&gt;
&lt;/div&gt;
&lt;div id=&#34;constructing-an-estimator-for-logpvecx-theta&#34; class=&#34;section level2&#34;&gt;
&lt;h2&gt;Constructing an estimator for &lt;span class=&#34;math inline&#34;&gt;\(\log(p(\vec{X} \ | \ \theta))\)&lt;/span&gt;&lt;/h2&gt;
&lt;p&gt;How do we fill in the blank left by step 3 above? That is, how do we use the probability density &lt;span class=&#34;math inline&#34;&gt;\(p(\vec{x}|\vec{y},\theta_m)\)&lt;/span&gt; to estimate the value of the random variable &lt;span class=&#34;math inline&#34;&gt;\(\log(p(\vec{X} \ | \ \theta))\)&lt;/span&gt;? Two possibilities come to mind.&lt;/p&gt;
&lt;div id=&#34;point-estimate-type-em&#34; class=&#34;section level3&#34;&gt;
&lt;h3&gt;Point-estimate type EM&lt;/h3&gt;
&lt;p&gt;One possibility is to let
&lt;span class=&#34;math display&#34;&gt;\[
\vec{x}_m = \vec{x}_m(\vec{y}, \theta_m) := \text{argmax}_{\vec{x}} \ p(\vec{x}|\vec{y},\theta_m)
\]&lt;/span&gt;
and then define
&lt;span class=&#34;math display&#34;&gt;\[
Q(\theta | \theta_m) := \log(p(\vec{x}_m \ | \ \theta))
\]&lt;/span&gt;
This is called point-estimate EM. Here we use “the most likely” value of &lt;span class=&#34;math inline&#34;&gt;\(\vec{X}\)&lt;/span&gt; as determined by the density &lt;span class=&#34;math inline&#34;&gt;\(p(\vec{x}|\vec{y},\theta_m)\)&lt;/span&gt; and then impute this value into our log-likelihood that we want to maximize. Another possibility would be to let&lt;/p&gt;
&lt;p&gt;&lt;span class=&#34;math display&#34;&gt;\[
\vec{x}_m = \vec{x}_m(\vec{y}, \theta_m) := \ \text{E}_{\vec{X} \ | \ \vec{Y} \ = \ \vec{y}, \ \theta_m}  \big[ \vec{X}\big]
\]&lt;/span&gt;
and let &lt;span class=&#34;math inline&#34;&gt;\(Q\)&lt;/span&gt; be as before.&lt;/p&gt;
&lt;p&gt;The idea of these type of EM algorithms is to first estimate the missing data &lt;span class=&#34;math inline&#34;&gt;\(\vec{x}\)&lt;/span&gt; and then impute the result into &lt;span class=&#34;math inline&#34;&gt;\(log(p(\vec{x}\ |\ \theta))\)&lt;/span&gt;.&lt;/p&gt;
&lt;/div&gt;
&lt;div id=&#34;expectation-em-i.e.-standard-em&#34; class=&#34;section level3&#34;&gt;
&lt;h3&gt;Expectation EM (i.e. standard EM)&lt;/h3&gt;
&lt;p&gt;There is a theoretically more elegant way. As mentioned earlier, we do not in fact need an estimate of the missing data &lt;span class=&#34;math inline&#34;&gt;\(\vec{x}\)&lt;/span&gt;. One of the best ways to estimate the value of a random variable with respect to a conditional distribution is to simply compute the conditional expectation of that variable with respect to that conditional distribution:&lt;/p&gt;
&lt;p&gt;&lt;span class=&#34;math display&#34;&gt;\[
Q(\theta | \theta_m) \ := \ \text{E}_{\vec{X} \ | \ \vec{Y} \ = \ \vec{y}, \ \theta_m}  \big[ \log(p(\vec{X} \ | \ \theta)) \big] = \int_{\mathcal{X}} \log(p(\vec{x} \ | \ \theta)) \ p(\vec{x}|\vec{y},\theta_m) \ d\vec{x} 
\]&lt;/span&gt;
Here we’re computing the mean of &lt;span class=&#34;math inline&#34;&gt;\(\log(p(\vec{X} \ | \ \theta))\)&lt;/span&gt; with respect to the density &lt;span class=&#34;math inline&#34;&gt;\(p(\vec{x}|\vec{y},\theta_m)\)&lt;/span&gt;. As is common when using expectations, this second method has some advantages we’ll see later. When we refer to EM we will always mean this case, unless otherwise specified.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div id=&#34;qthetatheta_m-for-i.i.d.-samples&#34; class=&#34;section level2&#34;&gt;
&lt;h2&gt;&lt;span class=&#34;math inline&#34;&gt;\(Q(\theta|\theta_m)\)&lt;/span&gt; for I.I.D. samples&lt;/h2&gt;
&lt;p&gt;So far everything has been rather general, applying to any random vectors &lt;span class=&#34;math inline&#34;&gt;\(\vec{X}\)&lt;/span&gt; and &lt;span class=&#34;math inline&#34;&gt;\(\vec{Y}\)&lt;/span&gt;. Many problems assume that data are generated independently and identically distributed (I.I.D.) so it’s helpful to have a formulation for this particular case.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Proposition:&lt;/strong&gt; Suppose that the components of &lt;span class=&#34;math inline&#34;&gt;\(\vec{X}\)&lt;/span&gt; are IID (given &lt;span class=&#34;math inline&#34;&gt;\(\theta\)&lt;/span&gt;), that is:
&lt;span class=&#34;math display&#34;&gt;\[
p(\vec{x}|\theta) = \prod_{i = 1}^N p(x_i|\theta) \  \qquad \forall x, \theta
\]&lt;/span&gt;
Suppose also that the dependence structure &lt;span class=&#34;math inline&#34;&gt;\(\theta \to \vec{X} \to \vec{Y}\)&lt;/span&gt; splits into subgraphs as &lt;span class=&#34;math inline&#34;&gt;\(\theta \to X_i \to Y_i\)&lt;/span&gt; for all &lt;span class=&#34;math inline&#34;&gt;\(i = 1, 2, ..., N\)&lt;/span&gt;. This just means that given &lt;span class=&#34;math inline&#34;&gt;\(X_i\)&lt;/span&gt;, the distribution &lt;span class=&#34;math inline&#34;&gt;\(Y_i\)&lt;/span&gt; is independent of all other variables:
&lt;span class=&#34;math display&#34;&gt;\[
p(y_i|\vec{x}, \theta, y_1, y_2, ..., y_{i-1}, y_{i+1}, ..., y_N) = p(y_i|x_i)
\]&lt;/span&gt;
Then &lt;span class=&#34;math inline&#34;&gt;\(Q(\theta|\theta_m):= \ \text{E}_{\vec{X} \ | \ \vec{Y} \ = \ \vec{y}, \ \theta_m} \big[ \log(p(\vec{X} \ | \ \theta)) \big]\)&lt;/span&gt; can be written as:
&lt;span class=&#34;math display&#34;&gt;\[
Q(\theta|\theta_m) = \sum_{i=1}^N Q_i(\theta|\theta_m)
\]&lt;/span&gt;
where
&lt;span class=&#34;math display&#34;&gt;\[
Q_i(\theta|\theta_m) := \ \text{E}_{X_i \ | \ Y_i \ = \ y_i, \ \theta_m}  \big[ \log(p(X_i \ | \ \theta)) \big].
\]&lt;/span&gt;
&lt;strong&gt;Proof:&lt;/strong&gt; The proof begins by showing that the joint elements &lt;span class=&#34;math inline&#34;&gt;\((X_i,Y_i)\)&lt;/span&gt; are independent across &lt;span class=&#34;math inline&#34;&gt;\(i\)&lt;/span&gt;, that is:
&lt;span class=&#34;math display&#34;&gt;\[
p(\vec{x},\vec{y}|\theta) = \prod_{i = 1}^N p(x_i, y_i|\theta). 
\]&lt;/span&gt;
To prove this we start by applying the multiplication theorem for probability densities:
&lt;span class=&#34;math display&#34;&gt;\[\begin{equation}
  \begin{aligned}

p(\vec{x},\vec{y}|\theta) &amp;amp;= p(y_1|y_2,y_3, ..., y_N, \vec{x},\theta)...p(y_N|\vec{x},\theta)p(\vec{x}|\theta) \qquad \text{by the multiplication theorem}\\

    &amp;amp;= p(y_1|x_1,\theta)...p(y_N|x_N,\theta)p(\vec{x}|\theta) \qquad \text{by conditional independence but keeping theta} \\
    &amp;amp;= p(\vec{x}|\theta)\prod_{i=1}^Np(y_i|x_i,\theta) \\
    &amp;amp;=\prod_{i=1}^Np(y_i|x_i,\theta)p(x_i|\theta) \qquad \text{by independence of the x&amp;#39;s} \\
    &amp;amp;= \prod_{i=1}^Np(y_i,x_i|\theta).
  \end{aligned}
\end{equation}\]&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;Next we have that for each &lt;span class=&#34;math inline&#34;&gt;\(i\)&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span class=&#34;math display&#34;&gt;\[\begin{equation}
  \begin{aligned}
  
  p(x_i|\vec{y},\theta) &amp;amp;= \frac{p(x_i,\vec{y}|\theta)}{p(\vec{y}|\theta)} \qquad \text{by Bayes} \\
  
  &amp;amp;= \frac{\int p(\vec{x},\vec{y}|\theta)dx_1...dx_{i-1}dx_{i+1}...dx_n}{\int p(\vec{x},\vec{y}|\theta)d\vec{x}} \\
  
  &amp;amp;= \frac{\int \prod_{j=1}^Np(y_j,x_j|\theta)dx_1...dx_{i-1}dx_{i+1}...dx_n}{\int \prod_{j=1}^Np(y_j,x_j|\theta)d\vec{x}} \\
  
  &amp;amp;= \frac{p(x_i,y_i|\theta) \prod_{j=1, j \ne i}^N \int p(y_j,x_j|\theta)dx_j}{\prod_{j=1}^N\int p(y_j,x_j|\theta) dx_j} \\
  
  &amp;amp;= \frac{p(x_i,y_i|\theta) \prod_{j=1, j \ne i}^N p(y_j|\theta)}{\prod_{j=1}^N p(y_j|\theta)}\\
  
  &amp;amp;= \frac{p(x_i,y_i|\theta)}{p(y_i|\theta)}\\
  
  &amp;amp;= p(x_i|y_i,\theta)

  \end{aligned}
\end{equation}\]&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;Hence &lt;span class=&#34;math inline&#34;&gt;\(p(x_i|\vec{y},\theta) = p(x_i|y_i,\theta)\)&lt;/span&gt;. Therefore we have&lt;/p&gt;
&lt;p&gt;&lt;span class=&#34;math display&#34;&gt;\[\begin{equation}
  \begin{aligned}
  
  Q(\theta, \theta_m) &amp;amp;= \text{E}_{\vec{X} \ | \ \vec{Y} \ = \ \vec{y}, \ \theta_m}  \big[ \log(p(\vec{X} \ | \ \theta)) \big] \\
  
  &amp;amp;= \text{E}_{\vec{X} \ | \ \vec{Y} \ = \ \vec{y}, \ \theta_m}  \big[ \log(\prod_{i = 1}^N p(X_i \ | \ \theta)) \big] \\
  
  &amp;amp;= \text{E}_{\vec{X} \ | \ \vec{Y} \ = \ \vec{y}, \ \theta_m}  \big[ \sum_{i = 1}^N \log(p(X_i \ | \ \theta)) \big]\\
  
  &amp;amp;= \sum_{i = 1}^N \text{E}_{X_i \ | \ \vec{Y} \ = \ \vec{y}, \ \theta_m}  \big[ \log(p(X_i \ | \ \theta)) \big] \\
  
  &amp;amp;= \sum_{i = 1}^N \text{E}_{X_i \ | \ Y_i \ = \ y_i, \ \theta_m}  \big[ \log(p(X_i \ | \ \theta)) \big]
  
  = \sum_{i=1}^N Q_i(\theta|\theta_m)

  \end{aligned}
\end{equation}\]&lt;/span&gt;
Where we used &lt;span class=&#34;math inline&#34;&gt;\(p(x_i|\vec{y},\theta) = p(x_i|y_i,\theta)\)&lt;/span&gt; in the 2nd to last equality. &lt;strong&gt;QED&lt;/strong&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;div id=&#34;maximum-a-posteriori-em-and-regularizing-priors&#34; class=&#34;section level2&#34;&gt;
&lt;h2&gt;Maximum A Posteriori EM and regularizing priors&lt;/h2&gt;
&lt;p&gt;The EM algorithm is easily extendable to regularized MLE. This is usually referred to as Maximum A Posteriori (MAP) in the Bayesian setting, which we adopt. Here the penalty term is interpreted as the log of the prior density on &lt;span class=&#34;math inline&#34;&gt;\(\theta\)&lt;/span&gt;, and the function to be maximized is the posterior density of &lt;span class=&#34;math inline&#34;&gt;\(\theta\)&lt;/span&gt; given the data. By Bayes’ Theorem
&lt;span class=&#34;math display&#34;&gt;\[
p(\theta|\vec{y}) \propto p(\vec{y}|\theta)p(\theta)
\]&lt;/span&gt;
where the proportionality constant is independent of &lt;span class=&#34;math inline&#34;&gt;\(\theta\)&lt;/span&gt;. Thus the MAP estimator is
&lt;span class=&#34;math display&#34;&gt;\[
\hat{\theta}_{MAP} := \text{argmax}_{\theta} \ \log(p(\theta|\vec{y})) \ = \text{argmax}_{\theta} \ \log(p(\vec{y}|\theta)) + \log(p(\theta))
\]&lt;/span&gt;
The way to extend EM to this situation is clear (at least formally): Simply replace the maximization step (step 4 above) in EM with maximizing &lt;span class=&#34;math inline&#34;&gt;\(Q(\theta|\theta_m) + \log(p(\theta))\)&lt;/span&gt; instead of simply &lt;span class=&#34;math inline&#34;&gt;\(Q(\theta|\theta_m)\)&lt;/span&gt;:&lt;/p&gt;
&lt;p&gt;&lt;span class=&#34;math display&#34;&gt;\[
\theta_{m+1} := \text{argmax}_{\theta} \ \ \ Q(\theta|\theta_m) + \log(p(\theta))
\]&lt;/span&gt;
where as before &lt;span class=&#34;math inline&#34;&gt;\(Q\)&lt;/span&gt; is given by&lt;/p&gt;
&lt;p&gt;&lt;span class=&#34;math display&#34;&gt;\[
Q(\theta | \theta_m) \ := \ \text{E}_{\vec{X} \ | \ \vec{Y} \ = \ \vec{y}, \ \theta_m}  \big[ \log(p(\vec{X} \ | \ \theta)) \big] = \int_{\mathcal{X}} \log(p(\vec{x} \ | \ \theta)) \ p(\vec{x}|\vec{y},\theta_m) \ d\vec{x} 
\]&lt;/span&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;div id=&#34;monotonicity-of-the-em-algorithm&#34; class=&#34;section level2&#34;&gt;
&lt;h2&gt;Monotonicity of the EM algorithm&lt;/h2&gt;
&lt;p&gt;At this point the reader has all the theory needed to begin applying EM where they believe it’s a good fit. Before we end the post though let’s mention at least one result that shows that EM is indeed a generalization of MLE to the case of hidden data: under relatively weak assumptions of the algorithm causes the log-likelihood &lt;span class=&#34;math inline&#34;&gt;\(\log(p(\vec{y}|\theta_m))\)&lt;/span&gt; to be an &lt;a href=&#34;https://en.wikipedia.org/wiki/Expectation%E2%80%93maximization_algorithm#Proof_of_correctness&#34;&gt;increasing sequence in &lt;span class=&#34;math inline&#34;&gt;\(m\)&lt;/span&gt;&lt;/a&gt;.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&#34;footnotes&#34;&gt;
&lt;hr /&gt;
&lt;ol&gt;
&lt;li id=&#34;fn1&#34;&gt;&lt;p&gt;Step 2 allows for a whole family of such algorithms, one for each possible approximator to &lt;span class=&#34;math inline&#34;&gt;\(\log(p(\vec{x} \ | \ \theta))\)&lt;/span&gt;. Step 4 can also be generalized. Since the value of &lt;span class=&#34;math inline&#34;&gt;\(\theta_{m+1}\)&lt;/span&gt; maximizes &lt;span class=&#34;math inline&#34;&gt;\(Q(\theta | \theta_m)\)&lt;/span&gt; then &lt;span class=&#34;math inline&#34;&gt;\(Q(\theta_{m+1} | \theta_m) \ge Q(\theta_m | \theta_m)\)&lt;/span&gt;. Instead of seeking to maximize &lt;span class=&#34;math inline&#34;&gt;\(Q(\theta | \theta_m)\)&lt;/span&gt; we may simply seek a value of &lt;span class=&#34;math inline&#34;&gt;\(\theta_{m+1}\)&lt;/span&gt; that improves on &lt;span class=&#34;math inline&#34;&gt;\(\theta_m\)&lt;/span&gt; in the sense of this inequality. For step 5, the stopping criteria are up to the implementer.&lt;a href=&#34;#fnref1&#34; class=&#34;footnote-back&#34;&gt;↩︎&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;/div&gt;
</description>
    </item>
    
    <item>
      <title>Passing expressions and data from R to C&#43;&#43; at compile-time in Rmarkdown</title>
      <link>/post/002_compile_time_data_r_to_cpp/main/</link>
      <pubDate>Sun, 21 Jun 2020 00:00:00 +0000</pubDate>
      <guid>/post/002_compile_time_data_r_to_cpp/main/</guid>
      <description>


&lt;div id=&#34;introduction&#34; class=&#34;section level2&#34;&gt;
&lt;h2&gt;Introduction&lt;/h2&gt;
&lt;p&gt;In this post we give a simple illustrative example of how data generated by R code can be used by compiled languages such as C++ at compile time, instead of run-time, inside Rmarkdown.&lt;/p&gt;
&lt;p&gt;This is an example of inter-language code generation. Metaprogramming/code generation is an extremely powerful technique but it’s also one that is very easy to overdo. This is just a fun example to learn from. Thorough testing is very important for any production code.&lt;/p&gt;
&lt;/div&gt;
&lt;div id=&#34;using-other-languages-in-rmarkdown&#34; class=&#34;section level2&#34;&gt;
&lt;h2&gt;Using other languages in Rmarkdown&lt;/h2&gt;
&lt;p&gt;Out of the box Rmarkdown can work with the following languages assuming a proper back-end is available:&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;names(knitr::knit_engines$get())&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;##  [1] &amp;quot;awk&amp;quot;         &amp;quot;bash&amp;quot;        &amp;quot;coffee&amp;quot;      &amp;quot;gawk&amp;quot;        &amp;quot;groovy&amp;quot;     
##  [6] &amp;quot;haskell&amp;quot;     &amp;quot;lein&amp;quot;        &amp;quot;mysql&amp;quot;       &amp;quot;node&amp;quot;        &amp;quot;octave&amp;quot;     
## [11] &amp;quot;perl&amp;quot;        &amp;quot;psql&amp;quot;        &amp;quot;Rscript&amp;quot;     &amp;quot;ruby&amp;quot;        &amp;quot;sas&amp;quot;        
## [16] &amp;quot;scala&amp;quot;       &amp;quot;sed&amp;quot;         &amp;quot;sh&amp;quot;          &amp;quot;stata&amp;quot;       &amp;quot;zsh&amp;quot;        
## [21] &amp;quot;highlight&amp;quot;   &amp;quot;Rcpp&amp;quot;        &amp;quot;tikz&amp;quot;        &amp;quot;dot&amp;quot;         &amp;quot;c&amp;quot;          
## [26] &amp;quot;fortran&amp;quot;     &amp;quot;fortran95&amp;quot;   &amp;quot;asy&amp;quot;         &amp;quot;cat&amp;quot;         &amp;quot;asis&amp;quot;       
## [31] &amp;quot;stan&amp;quot;        &amp;quot;block&amp;quot;       &amp;quot;block2&amp;quot;      &amp;quot;js&amp;quot;          &amp;quot;css&amp;quot;        
## [36] &amp;quot;sql&amp;quot;         &amp;quot;go&amp;quot;          &amp;quot;python&amp;quot;      &amp;quot;julia&amp;quot;       &amp;quot;sass&amp;quot;       
## [41] &amp;quot;scss&amp;quot;        &amp;quot;theorem&amp;quot;     &amp;quot;lemma&amp;quot;       &amp;quot;corollary&amp;quot;   &amp;quot;proposition&amp;quot;
## [46] &amp;quot;conjecture&amp;quot;  &amp;quot;definition&amp;quot;  &amp;quot;example&amp;quot;     &amp;quot;exercise&amp;quot;    &amp;quot;proof&amp;quot;      
## [51] &amp;quot;remark&amp;quot;      &amp;quot;solution&amp;quot;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Although we can use R’s native foreign function interface to call compiled code, for C++ a higher level alternative is to use &lt;a href=&#34;https://cran.r-project.org/web/packages/Rcpp/index.html&#34;&gt;Rcpp&lt;/a&gt;. In Rmarkdown we can &lt;a href=&#34;https://bookdown.org/yihui/rmarkdown/language-engines.html#rcpp&#34;&gt;compile C++ code chunks using Rcpp and export the compiled functions to be available for use in R&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;As a common example, we can compile the following code&lt;/p&gt;
&lt;pre class=&#34;cpp&#34;&gt;&lt;code&gt;#include &amp;lt;Rcpp.h&amp;gt;
using namespace Rcpp;

// [[Rcpp::export]]
NumericVector timesTwo(NumericVector x) 
{
    return x * 2;
}&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;and use the exported function in R&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;timesTwo(1:10)&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;##  [1]  2  4  6  8 10 12 14 16 18 20&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;div id=&#34;registering-a-user-defined-language-engine-in-knitr&#34; class=&#34;section level2&#34;&gt;
&lt;h2&gt;Registering a user-defined language engine in Knitr&lt;/h2&gt;
&lt;p&gt;We can create &lt;a href=&#34;https://bookdown.org/yihui/rmarkdown-cookbook/custom-engine.html&#34;&gt;user-defined engines&lt;/a&gt; to control exactly how the code chunk is sourced, or even modify existing engines. To get an idea we can look at the default Rcpp engine used by knitr:&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;knitr::knit_engines$get()$Rcpp&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## function (options) 
## {
##     sourceCpp = getFromNamespace(&amp;quot;sourceCpp&amp;quot;, &amp;quot;Rcpp&amp;quot;)
##     code = one_string(options$code)
##     opts = options$engine.opts
##     cache = options$cache &amp;amp;&amp;amp; (&amp;quot;cacheDir&amp;quot; %in% names(formals(sourceCpp)))
##     if (cache) {
##         opts$cacheDir = paste(valid_path(options$cache.path, 
##             options$label), &amp;quot;sourceCpp&amp;quot;, sep = &amp;quot;_&amp;quot;)
##         opts$cleanupCacheDir = TRUE
##     }
##     if (!is.environment(opts$env)) 
##         opts$env = knit_global()
##     if (options$eval) {
##         message(&amp;quot;Building shared library for Rcpp code chunk...&amp;quot;)
##         do.call(sourceCpp, c(list(code = code), opts))
##     }
##     options$engine = &amp;quot;cpp&amp;quot;
##     engine_output(options, code, &amp;quot;&amp;quot;)
## }
## &amp;lt;environment: namespace:knitr&amp;gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Using the default engine above as a template we can define a new knitr engine for compiling C++. One that can read and make use of more dynamic R data in C++ before compilation (or even dynamically create &lt;code&gt;Makevars&lt;/code&gt; files to control compilation flags). First let’s include the knitr package:&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;library(knitr)&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Next let’s take a crack at defining a new engine to compile C++ code. In this example we will modify the current Rcpp engine to take in an &lt;code&gt;extra&lt;/code&gt; field (but otherwise behave the same).&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;knit_engines$set(RcppFoo = function(options) {
    
    extra = options$extra
    
    sourceCpp = getFromNamespace(&amp;quot;sourceCpp&amp;quot;, &amp;quot;Rcpp&amp;quot;)
    
    ## Code is read as a list of strings, one list element per line
    ## Here we append extra code that may be defined in R to the 
    ## code written in the chunk
    code = c(extra, options$code)
    code = paste(code, collapse = &amp;#39;\n&amp;#39;)
    opts = options$engine.opts
    
    if (!is.environment(opts$env)) 
        opts$env = knit_global()

    if (options$eval) {    
        message(&amp;quot;Building shared library for Rcpp code chunk...&amp;quot;)
        do.call(sourceCpp, c(list(code = code), opts))
    }
    options$engine = &amp;quot;cpp&amp;quot;
    engine_output(options, 
                  options$code, 
                  paste(&amp;quot;Added the lines:\n&amp;quot;, 
                      paste(extra, collapse = &amp;#39;\n&amp;#39;), 
                      sep = &amp;#39;\n&amp;#39;))
})&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Next we test by creating some data in R and using that as a compile time constant in C++. Here we pass values of pi and e as static const doubles to C++ (a much cleaner API is possible of course).&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;constants = list(
    paste(&amp;#39;static const double Pi =&amp;#39;, pi, &amp;#39;;&amp;#39;),
    paste(&amp;#39;static const double Euler =&amp;#39;, exp(1),&amp;#39;;&amp;#39;)
)&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;This already highlights a danger as we have not considered exactly how R might convert these double precision floating point numbers to strings. Regardless, we proceed. To use the new engine we run the engine as &lt;code&gt;{RcppFoo test_chunk, extra = constants}&lt;/code&gt;&lt;/p&gt;
&lt;pre class=&#34;cpp&#34;&gt;&lt;code&gt;#include &amp;lt;Rcpp.h&amp;gt;
using namespace Rcpp;

// [[Rcpp::export]]
NumericVector timesFoo(NumericVector x) 
{
    return x * Pi + Euler;
}&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## Added the lines:
## 
## static const double Pi = 3.14159265358979 ;
## static const double Euler = 2.71828182845905 ;&lt;/code&gt;&lt;/pre&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;x = timesFoo(1:10)
print(x)&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;##  [1]  5.859874  9.001467 12.143060 15.284652 18.426245 21.567838 24.709430
##  [8] 27.851023 30.992616 34.134208&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;We get &lt;strong&gt;almost&lt;/strong&gt; the same result as in R&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;y = pi*(1:10)+exp(1)
print(y)&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;##  [1]  5.859874  9.001467 12.143060 15.284652 18.426245 21.567838 24.709430
##  [8] 27.851023 30.992616 34.134208&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;But metaprogramming can be dangerous when mixed with floating point arithmetic. In this case some loss of precision occurred with the doubles when converting to strings:&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;x - y&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;##  [1]  1.776357e-15  0.000000e+00 -3.552714e-15 -7.105427e-15 -1.065814e-14
##  [6] -1.421085e-14 -1.776357e-14 -1.776357e-14 -2.131628e-14 -2.842171e-14&lt;/code&gt;&lt;/pre&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;as.double(as.character(pi))*(1:10) + as.double(as.character(exp(1))) - x&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;##  [1] 0.000000e+00 0.000000e+00 0.000000e+00 0.000000e+00 0.000000e+00
##  [6] 3.552714e-15 3.552714e-15 0.000000e+00 0.000000e+00 0.000000e+00&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Anyway this was just a small example. There are many many directions one can choose to take with metaprogramming. Even creating new preprocessing directives such as unrolling loops, defining constexprs, etc.&lt;/p&gt;
&lt;/div&gt;
</description>
    </item>
    
    <item>
      <title>Deriving Principal Component Analysis and implementing in C&#43;&#43; using Eigen</title>
      <link>/post/001_deriving_pca/main/</link>
      <pubDate>Sat, 20 Jun 2020 00:00:00 +0000</pubDate>
      <guid>/post/001_deriving_pca/main/</guid>
      <description>


&lt;div id=&#34;introduction&#34; class=&#34;section level2&#34;&gt;
&lt;h2&gt;Introduction&lt;/h2&gt;
&lt;p&gt;&lt;a href=&#34;https://en.wikipedia.org/wiki/Principal_component_analysis&#34;&gt;Principal component analysis&lt;/a&gt; is one of the most commonly used techniques in statistical modeling and machine learning. In typical applications it serves as a (linear) dimensionality reduction, allowing one to project high dimensional data onto a lower dimensional subspace. This can help make a problem that was previously computationally intractable easier, or can help transform feature variables into something more useful. However, most presentations fail to give a sense of “why” and students are left without an understanding of exactly what PCA is and what assumptions it makes. This can lead to model risk issues and prevent users from being able to modify the technique when different assumptions hold. The purpose of this post is to rectify this with a derivation for those that want to know why, which should be everyone. For fun we implement what we learn at the end in a few lines of C++.&lt;/p&gt;
&lt;div id=&#34;a-note-on-difficulty&#34; class=&#34;section level3&#34;&gt;
&lt;h3&gt;A note on difficulty&lt;/h3&gt;
&lt;p&gt;To understand what follows you need to understand linear algebra and undergraduate probability. &lt;strong&gt;The proof that follows is as clear, honest, and self-contained as I think is possible, but most will not find it easy&lt;/strong&gt;. In my opinion if a truly easy and theoretically honest proof were possible you would have already seen it.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div id=&#34;deriving-pca&#34; class=&#34;section level2&#34;&gt;
&lt;h2&gt;Deriving PCA&lt;/h2&gt;
&lt;p&gt;As scientists our data is often times multidimensional because it involves measurements of many features of the world. Equally often, our data may have some “randomness” in it that we can not capture (so that if the experiment that was run to obtain the data were rerun the results may not be exactly the same).&lt;/p&gt;
&lt;p&gt;Let &lt;span class=&#34;math inline&#34;&gt;\(\vec{X} = [X^1, X^2, ..., X^d]\)&lt;/span&gt; be a &lt;span class=&#34;math inline&#34;&gt;\(d\)&lt;/span&gt;-dimensional random vector &lt;a href=&#34;#fn1&#34; class=&#34;footnote-ref&#34; id=&#34;fnref1&#34;&gt;&lt;sup&gt;1&lt;/sup&gt;&lt;/a&gt; that represents the measured values of &lt;span class=&#34;math inline&#34;&gt;\(d\)&lt;/span&gt; feature variables.&lt;/p&gt;
&lt;p&gt;We want to capture the “shape” of the randomness of &lt;span class=&#34;math inline&#34;&gt;\(\vec{X}\)&lt;/span&gt;. For example, in what directions does &lt;span class=&#34;math inline&#34;&gt;\(\vec{X}\)&lt;/span&gt; vary the most? In what directions does it vary the least? This is important because if, for example, &lt;span class=&#34;math inline&#34;&gt;\(\vec{X}\)&lt;/span&gt; had a lot of randomness in its first coordinate &lt;span class=&#34;math inline&#34;&gt;\(X^1\)&lt;/span&gt;, but had very little randomness in the other coordinates, then independent measurements of &lt;span class=&#34;math inline&#34;&gt;\(\vec{X}\)&lt;/span&gt; would differ a lot in the first coordinate, but not much in the others. The other coordinates would all give roughly the same values and hence roughly the same information. The other coordinates would in a sense be redundant: replacing &lt;span class=&#34;math inline&#34;&gt;\(\vec{X}\)&lt;/span&gt; by &lt;span class=&#34;math inline&#34;&gt;\(X^1\)&lt;/span&gt; would not lose a lot of information but would have the benefit of having to deal with only 1 feature as opposed to &lt;span class=&#34;math inline&#34;&gt;\(d\)&lt;/span&gt; features (i.e. a dimensionality reduction).&lt;/p&gt;
&lt;p&gt;To proceed we need to define some measure of variation or randomness. A good one is variance. Our goal is to decompose &lt;span class=&#34;math inline&#34;&gt;\(\vec{X}\)&lt;/span&gt; into vectors along which &lt;span class=&#34;math inline&#34;&gt;\(\vec{X}\)&lt;/span&gt; has the most variance. Directions are represented by unit vectors (i.e. vectors of length 1). If &lt;span class=&#34;math inline&#34;&gt;\(\vec{\omega}\)&lt;/span&gt; is a non-random unit vector, then the component of &lt;span class=&#34;math inline&#34;&gt;\(\vec{X}\)&lt;/span&gt; along &lt;span class=&#34;math inline&#34;&gt;\(\vec{\omega}\)&lt;/span&gt; is given by&lt;/p&gt;
&lt;p&gt;&lt;span class=&#34;math display&#34;&gt;\[
\langle\ \vec{\omega}\ ,\ \vec{X}\ \rangle\ \vec{\omega}
\]&lt;/span&gt;
where &lt;span class=&#34;math inline&#34;&gt;\(\langle\ \vec{\omega}\ ,\ \vec{X}\ \rangle\)&lt;/span&gt; denotes the inner product in &lt;span class=&#34;math inline&#34;&gt;\(\mathbb{R}^d\)&lt;/span&gt; (aka, dot product). Since &lt;span class=&#34;math inline&#34;&gt;\(\vec{\omega}\)&lt;/span&gt; is not random, the randomness of &lt;span class=&#34;math inline&#34;&gt;\(\langle\ \vec{\omega}\ ,\ \vec{X}\ \rangle\ \vec{\omega}\)&lt;/span&gt; is controlled entirely by the coefficient &lt;span class=&#34;math inline&#34;&gt;\(\langle\ \vec{\omega}\ ,\ \vec{X}\ \rangle\)&lt;/span&gt;. To find the direction of maximal variance is to simply find &lt;span class=&#34;math inline&#34;&gt;\(\vec{\omega}\)&lt;/span&gt; that maximizes the variance of this inner product. In other words we want&lt;/p&gt;
&lt;p&gt;&lt;span class=&#34;math display&#34;&gt;\[
\vec{\omega}_1 := \text{argmax} \ \ \text{Var}( \langle\ \vec{\omega}\ ,\ \vec{X}\ \rangle ) 
\]&lt;/span&gt;
where the argmax is taken over all &lt;span class=&#34;math inline&#34;&gt;\(\vec{\omega}\)&lt;/span&gt; with &lt;span class=&#34;math inline&#34;&gt;\(||\vec{\omega}|| = 1\)&lt;/span&gt;&lt;a href=&#34;#fn2&#34; class=&#34;footnote-ref&#34; id=&#34;fnref2&#34;&gt;&lt;sup&gt;2&lt;/sup&gt;&lt;/a&gt;. We begin:&lt;/p&gt;
&lt;p&gt;&lt;span class=&#34;math display&#34;&gt;\[\begin{equation}
  \begin{aligned}

\text{Var}( \langle\ \vec{\omega}\ ,\ \vec{X}\ \rangle )  &amp;amp;= 
\text{E}\bigg[\bigg(\langle\ \vec{\omega}\ ,\ \vec{X}\ \rangle - \text{E}[\langle\ \vec{\omega}\ ,\ \vec{X}\ \rangle]\bigg)^2\bigg] \\


    &amp;amp;= \text{E}[\langle\ \vec{\omega}\ , \ \vec{X} - \text{E}[\vec{X}] \ \rangle^2] \\
    
    
    &amp;amp;= \text{E}\bigg[\ \bigg(\sum_i\omega_i(X^i - \text{E}[X^i])\bigg)^2\bigg] \\
    
    
    &amp;amp;= \text{E}\bigg[ \sum_{i,j}\omega_i\omega_j(X^i - \text{E}[X^i])(X^j - \text{E}[X^j]) \bigg] \\
    
    
    &amp;amp;= \sum_{i,j}\omega_i\omega_j \ \text{E}\bigg[ \ (X^i - \text{E}[X^i])(X^j - \text{E}[X^j]) \ \bigg] \\
    
    
    &amp;amp;= \sum_{i,j}\omega_i\omega_j \ \text{Cov}(X^i, X^j) \\
    
    
    &amp;amp;= \langle \ \vec{\omega} \ , \ \text{Cov}(\vec{X})\vec{\omega} \ \rangle
  \end{aligned}
\end{equation}\]&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;where &lt;span class=&#34;math inline&#34;&gt;\(\text{Cov}(\vec{X})\)&lt;/span&gt; is the covariance matrix of &lt;span class=&#34;math inline&#34;&gt;\(\vec{X}\)&lt;/span&gt;. So&lt;/p&gt;
&lt;p&gt;&lt;span class=&#34;math display&#34;&gt;\[
\vec{\omega}_1 := \text{argmax} \ \ \langle \ \vec{\omega} \ , \ \text{Cov}(\vec{X})\vec{\omega} \ \rangle 
\]&lt;/span&gt;
again the argmax is taken over all &lt;span class=&#34;math inline&#34;&gt;\(\vec{\omega}\)&lt;/span&gt; with &lt;span class=&#34;math inline&#34;&gt;\(||\vec{\omega}|| = 1\)&lt;/span&gt;. This problem is called a “variational problem”, but why so is not important at the moment.&lt;/p&gt;
&lt;p&gt;This &lt;span class=&#34;math inline&#34;&gt;\(\vec{\omega}_1\)&lt;/span&gt; must be the first eigenvector of the matrix &lt;span class=&#34;math inline&#34;&gt;\(\text{Cov}(\vec{X})\)&lt;/span&gt;. Why? &lt;strong&gt;This is the hard part. If you can understand what follows you’re golden&lt;/strong&gt;. There are multiple ways to see why this is the case:&lt;/p&gt;
&lt;p&gt;One is by Lagrange multipliers. If we write &lt;span class=&#34;math inline&#34;&gt;\(f(\vec{\omega}) := \langle \ \vec{\omega} \ , \ \text{Cov}(\vec{X})\vec{\omega} \ \rangle\)&lt;/span&gt; then&lt;/p&gt;
&lt;p&gt;&lt;span class=&#34;math display&#34;&gt;\[\begin{equation}
\begin{aligned}

f(\vec{\omega} + \vec{h}) - f(\vec{\omega}) &amp;amp;=  \langle \ \vec{\omega} + \vec{h} \ , \ \text{Cov}(\vec{X})(\vec{\omega}+\vec{h}) \ \rangle - \langle \ \vec{\omega} \ , \ \text{Cov}(\vec{X})\vec{\omega} \ \rangle \\

    &amp;amp;= \langle \ \vec{h} \ , \ \text{Cov}(\vec{X})\vec{\omega} \ \rangle + \langle \ \vec{\omega} \ , \ \text{Cov}(\vec{X})\vec{h}\rangle \ + \langle \ \vec{h} \ , \ \text{Cov}(\vec{X})\vec{h} \rangle \\
    
    &amp;amp;= 2\langle \ \vec{h} \ , \ \text{Cov}(\vec{X})\vec{\omega} \ \rangle + \langle \ \vec{h} \ , \ \text{Cov}(\vec{X})\vec{h} \rangle

\end{aligned}
\end{equation}\]&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;where we first expanded the first term using the bilinearity of the inner product, canceled like terms, and lastly used the symmetry of the covariance matrix to combine two terms. In the above expression the first order term in &lt;span class=&#34;math inline&#34;&gt;\(\vec{h}\)&lt;/span&gt; is given by &lt;span class=&#34;math inline&#34;&gt;\(\langle \ \vec{h} \ , \ 2\text{Cov}(\vec{X})\vec{\omega} \ \rangle\)&lt;/span&gt;. The other term is quadratic in &lt;span class=&#34;math inline&#34;&gt;\(\vec{h}\)&lt;/span&gt;. By definition the differential of &lt;span class=&#34;math inline&#34;&gt;\(f\)&lt;/span&gt; at &lt;span class=&#34;math inline&#34;&gt;\(\vec{\omega}\)&lt;/span&gt; is this linear term:&lt;/p&gt;
&lt;p&gt;&lt;span class=&#34;math display&#34;&gt;\[
df_{\vec{\omega}} \ (\vec{h}) = \langle \ \vec{h} \ , \ 2\text{Cov}(\vec{X})\vec{\omega} \ \rangle
\]&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;By definition&lt;a href=&#34;#fn3&#34; class=&#34;footnote-ref&#34; id=&#34;fnref3&#34;&gt;&lt;sup&gt;3&lt;/sup&gt;&lt;/a&gt; the gradient of &lt;span class=&#34;math inline&#34;&gt;\(f\)&lt;/span&gt; at &lt;span class=&#34;math inline&#34;&gt;\(\vec{\omega}\)&lt;/span&gt; is just the vector in the above expression which the inner product with &lt;span class=&#34;math inline&#34;&gt;\(\vec{h}\)&lt;/span&gt; is being taken:&lt;/p&gt;
&lt;p&gt;&lt;span class=&#34;math display&#34;&gt;\[
\nabla_{\vec{\omega}} f = 2 \ \text{Cov}(\vec{X}) \ \vec{\omega}
\]&lt;/span&gt;
Because our variational problem is to maximize &lt;span class=&#34;math inline&#34;&gt;\(f(\vec{\omega})\)&lt;/span&gt; on the unit sphere where &lt;span class=&#34;math inline&#34;&gt;\(||\vec{\omega}|| = 1\)&lt;/span&gt;, then the gradient of &lt;span class=&#34;math inline&#34;&gt;\(f\)&lt;/span&gt; at the maximizing point &lt;span class=&#34;math inline&#34;&gt;\(\vec{\omega}_1\)&lt;/span&gt; must be orthogonal (i.e. perpendicular, i.e. normal) to the surface of the unit sphere at that point&lt;a href=&#34;#fn4&#34; class=&#34;footnote-ref&#34; id=&#34;fnref4&#34;&gt;&lt;sup&gt;4&lt;/sup&gt;&lt;/a&gt;. The direction (i.e. unit vector) perpendicular to the unit sphere at &lt;span class=&#34;math inline&#34;&gt;\(\vec{\omega}_1\)&lt;/span&gt; is &lt;span class=&#34;math inline&#34;&gt;\(\vec{\omega}_1\)&lt;/span&gt; itself with its starting point translated to the surface!&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;/img/Spherical_unit_vectors.png&#34; /&gt;&lt;/p&gt;
&lt;p&gt;Thus the gradient of &lt;span class=&#34;math inline&#34;&gt;\(f\)&lt;/span&gt; at &lt;span class=&#34;math inline&#34;&gt;\(\vec{\omega}_1\)&lt;/span&gt; must be collinear with (and hence a multiple of) &lt;span class=&#34;math inline&#34;&gt;\(\vec{\omega}_1\)&lt;/span&gt;:&lt;/p&gt;
&lt;p&gt;&lt;span class=&#34;math display&#34;&gt;\[
\nabla_{\vec{\omega}_1}f  = \lambda&amp;#39; \ \vec{\omega}_1
\]&lt;/span&gt;
for some number &lt;span class=&#34;math inline&#34;&gt;\(\lambda&amp;#39;\)&lt;/span&gt;. Thus&lt;/p&gt;
&lt;p&gt;&lt;span class=&#34;math display&#34;&gt;\[
\text{Cov}(\vec{X}) \ \vec{\omega}_1 = \frac{\lambda&amp;#39;}{2} \ \vec{\omega}_1 =: \lambda \ \vec{\omega}_1
\]&lt;/span&gt;
Hence &lt;span class=&#34;math inline&#34;&gt;\(\vec{\omega}_1\)&lt;/span&gt; is an eigenvector of &lt;span class=&#34;math inline&#34;&gt;\(\text{Cov}(\vec{X})\)&lt;/span&gt;. We note that the eigenvalue &lt;span class=&#34;math inline&#34;&gt;\(\lambda\)&lt;/span&gt; is just the variance we wanted to maximize:&lt;/p&gt;
&lt;p&gt;&lt;span class=&#34;math display&#34;&gt;\[
\langle \ \vec{\omega}_1 \ , \ \text{Cov}(\vec{X}) \ \vec{\omega}_1 \ \rangle = \langle \ \vec{\omega}_1 \ , \lambda \vec{\omega}_1 \ \rangle = \lambda\langle \ \vec{\omega}_1 \ , \vec{\omega}_1 \ \rangle = \lambda ||\vec{\omega}||^2 = \lambda
\]&lt;/span&gt;
Thus we see that eigenvectors capture directions of maximal variance and eigenvalues capture the value of the variance in that maximal direction! We can also see why the variance is a nice measure of variation/randomness. Because it’s &lt;strong&gt;quadratic&lt;/strong&gt; in its arguments, derivatives of it become &lt;strong&gt;linear&lt;/strong&gt;, leading to &lt;strong&gt;linear&lt;/strong&gt; eigenvalue problems, which are very well understood by mathematicians.&lt;/p&gt;
&lt;p&gt;We proceed as follows. Let &lt;span class=&#34;math inline&#34;&gt;\(\vec{X}_{new} = \vec{X} - \langle\vec{\omega}_1,\vec{X}\rangle\vec{\omega}_1\)&lt;/span&gt;. This &lt;span class=&#34;math inline&#34;&gt;\(\vec{X}_{new}\)&lt;/span&gt; is just the component of &lt;span class=&#34;math inline&#34;&gt;\(\vec{X}\)&lt;/span&gt; orthogonal to &lt;span class=&#34;math inline&#34;&gt;\(\vec{\omega}_1\)&lt;/span&gt;. Intuitively it’s the part of &lt;span class=&#34;math inline&#34;&gt;\(\vec{X}\)&lt;/span&gt; that &lt;span class=&#34;math inline&#34;&gt;\(\vec{\omega}_1\)&lt;/span&gt; can not explain.&lt;/p&gt;
&lt;p&gt;Just as before we want to capture the direction of maximal variance of &lt;span class=&#34;math inline&#34;&gt;\(\vec{X}_{new}\)&lt;/span&gt;. I.e. we want a vector &lt;span class=&#34;math inline&#34;&gt;\(\vec{\omega}_2\)&lt;/span&gt; with &lt;span class=&#34;math inline&#34;&gt;\(||\vec{\omega}_2||=1\)&lt;/span&gt; such that &lt;span class=&#34;math inline&#34;&gt;\(\text{Var}(\langle \vec{\omega}_2, \vec{X}_{new}\rangle)\)&lt;/span&gt; is maximal.&lt;/p&gt;
&lt;p&gt;Since &lt;span class=&#34;math inline&#34;&gt;\(\vec{X}_{new} \perp \vec{\omega}_1\)&lt;/span&gt;&lt;a href=&#34;#fn5&#34; class=&#34;footnote-ref&#34; id=&#34;fnref5&#34;&gt;&lt;sup&gt;5&lt;/sup&gt;&lt;/a&gt; then &lt;span class=&#34;math inline&#34;&gt;\(\langle \vec{\omega}, \vec{X}_{new}\rangle = \langle \vec{\omega} - \alpha\vec{\omega}_1, \vec{X}_{new}\rangle\)&lt;/span&gt; for any &lt;span class=&#34;math inline&#34;&gt;\(\alpha \in \mathbb{R}\)&lt;/span&gt;. Therefore by replacing &lt;span class=&#34;math inline&#34;&gt;\(\vec{\omega}\)&lt;/span&gt; with &lt;span class=&#34;math inline&#34;&gt;\(\vec{\omega} - \langle\vec{\omega}_1,\vec{\omega}\rangle\vec{\omega}_1\)&lt;/span&gt; we may restrict our maximization problem to maximizing &lt;span class=&#34;math inline&#34;&gt;\(\text{Var}(\langle \vec{\omega}, \vec{X}_{new}\rangle)\)&lt;/span&gt; over all &lt;span class=&#34;math inline&#34;&gt;\(\vec{\omega}\)&lt;/span&gt; with &lt;span class=&#34;math inline&#34;&gt;\(||\vec{\omega}|| = 1\)&lt;/span&gt; and &lt;span class=&#34;math inline&#34;&gt;\(\vec{\omega} \perp \vec{\omega}_1\)&lt;/span&gt;.&lt;/p&gt;
&lt;p&gt;We transform this expression as follows:&lt;/p&gt;
&lt;p&gt;&lt;span class=&#34;math display&#34;&gt;\[\begin{equation}
\begin{aligned}

\text{Var}(\langle \vec{\omega}, \vec{X}_{new}\rangle) &amp;amp;= \text{Var}(\langle \vec{\omega}, \vec{X} - \langle\vec{\omega}_1,\vec{X}\rangle\vec{\omega}_1\rangle) \\

    &amp;amp;= \text{Var}(\langle \vec{\omega}, \vec{X}\rangle) \qquad \text{Since }\vec{\omega}\perp\vec{\omega}_1 \\
    
    &amp;amp;= \langle \vec{\omega}, \text{Cov}(\vec{X})\vec{\omega}\rangle \qquad \text{By the earlier computation}

\end{aligned}
\end{equation}\]&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;So the vector &lt;span class=&#34;math inline&#34;&gt;\(\vec{\omega}_2\)&lt;/span&gt; is given by the new variational problem&lt;/p&gt;
&lt;p&gt;&lt;span class=&#34;math display&#34;&gt;\[
\vec{\omega}_2 = \text{argmax} \ \langle \vec{\omega}, \text{Cov}(\vec{X})\vec{\omega}\rangle
\]&lt;/span&gt;
where the argmax is taken over all &lt;span class=&#34;math inline&#34;&gt;\(\vec{\omega}\)&lt;/span&gt; with &lt;span class=&#34;math inline&#34;&gt;\(||\vec{\omega}|| = 1\)&lt;/span&gt; and &lt;span class=&#34;math inline&#34;&gt;\(\vec{\omega} \perp \vec{\omega}_1\)&lt;/span&gt;. Now &lt;span class=&#34;math inline&#34;&gt;\(\langle \vec{\omega}_2, \vec{X}_{new}\rangle = \langle \vec{\omega}_2, \vec{X}\rangle\)&lt;/span&gt; is of maximal variance in a direction perpendicular to &lt;span class=&#34;math inline&#34;&gt;\(\vec{\omega}_1\)&lt;/span&gt;.&lt;/p&gt;
&lt;p&gt;Notice that this is the same maximization problem as before, but now restricted to a lower dimensional subspace (the subspace that is prependicular to &lt;span class=&#34;math inline&#34;&gt;\(\vec{\omega}_1\)&lt;/span&gt;). The same Lagrange multiplier calculation as before can be applied again in this subspace. This shows that &lt;span class=&#34;math inline&#34;&gt;\(\vec{\omega}_2\)&lt;/span&gt; is an eigenvector of &lt;span class=&#34;math inline&#34;&gt;\(\text{Cov}(\vec{X})\)&lt;/span&gt; with eigenvalue &lt;span class=&#34;math inline&#34;&gt;\(\langle \vec{\omega}_2, \text{Cov}(\vec{X})\vec{\omega}_2\rangle\)&lt;/span&gt;. This eigenvalue must be less than or equal to the eigenvalue of &lt;span class=&#34;math inline&#34;&gt;\(\vec{\omega}_1\)&lt;/span&gt; because the maximum of the same expression is being taken over a smaller set for &lt;span class=&#34;math inline&#34;&gt;\(\vec{\omega}_2\)&lt;/span&gt;.&lt;/p&gt;
&lt;p&gt;We can continue this process until all eigenvectors are exhausted. By decomposing &lt;span class=&#34;math inline&#34;&gt;\(\vec{X}\)&lt;/span&gt; into linear combinations of the eigenvectors &lt;span class=&#34;math inline&#34;&gt;\(\vec{\omega}_i\)&lt;/span&gt; we may choose to capture as much or as little of the variance of &lt;span class=&#34;math inline&#34;&gt;\(\vec{X}\)&lt;/span&gt; as we please. For example, by projecting onto the first k eigenvectors we may capture the k-dimensional variance of &lt;span class=&#34;math inline&#34;&gt;\(\vec{X}\)&lt;/span&gt;:&lt;/p&gt;
&lt;p&gt;&lt;span class=&#34;math display&#34;&gt;\[
\vec{X}_k := \sum_{i = 1}^k\langle\vec{\omega}_i,\vec{X}\rangle\vec{\omega}_i
\]&lt;/span&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;div id=&#34;sample-estimators&#34; class=&#34;section level2&#34;&gt;
&lt;h2&gt;Sample estimators&lt;/h2&gt;
&lt;p&gt;In practice we do not know the matrix &lt;span class=&#34;math inline&#34;&gt;\(\text{Cov}(\vec{X})\)&lt;/span&gt;, but instead have a data matrix &lt;span class=&#34;math inline&#34;&gt;\(\{ \vec{X}_j \}_{j=1}^N\)&lt;/span&gt; of row vectors representing realizations of the random vector &lt;span class=&#34;math inline&#34;&gt;\(\vec{X}\)&lt;/span&gt;.&lt;/p&gt;
&lt;p&gt;Statistics is often concerned with constructing sample estimators of quantities. If our data rows are sampled IID from the distribution of &lt;span class=&#34;math inline&#34;&gt;\(\vec{X}\)&lt;/span&gt; then in lieu of &lt;span class=&#34;math inline&#34;&gt;\(\text{Cov}(X^i,X^j)\)&lt;/span&gt; we construct the sample covariances:&lt;/p&gt;
&lt;p&gt;&lt;span class=&#34;math display&#34;&gt;\[
S^2_{i,j} := \frac{1}{N-1}\sum_{n=1}^N\bigg(X^i_n - \bar{X}^i\bigg)\bigg(X^j_n - \bar{X}^j\bigg)
\]&lt;/span&gt;
where &lt;span class=&#34;math inline&#34;&gt;\(\bar{X}^i\)&lt;/span&gt; is the mean of the &lt;span class=&#34;math inline&#34;&gt;\(i^{\text{th}}\)&lt;/span&gt; feature column. This estimator is a statistic constructed for its favorable distributional properties under IID assumptions as &lt;span class=&#34;math inline&#34;&gt;\(N\)&lt;/span&gt; becomes large. In particular, it converges to &lt;span class=&#34;math inline&#34;&gt;\(\text{Cov}(X^i,X^j)\)&lt;/span&gt; in some sense.&lt;/p&gt;
&lt;/div&gt;
&lt;div id=&#34;implementing-in-eigen&#34; class=&#34;section level2&#34;&gt;
&lt;h2&gt;Implementing in Eigen&lt;/h2&gt;
&lt;p&gt;The derivation above gives us one formula to carry out PCA: simply compute the sample covariance matrix of the data and extract its eigenvectors and eigenvalues. This may or may not be the most numerically efficient/stable algorithm to use (I haven’t checked), but this is easy enough to implement in most numerical computing languages. Here we implement it in C++ using the &lt;a href=&#34;http://eigen.tuxfamily.org/&#34;&gt;Eigen&lt;/a&gt; library. To make it more interactive we use the &lt;a href=&#34;https://cran.r-project.org/web/packages/RcppEigen/index.html&#34;&gt;RcppEigen&lt;/a&gt; package in R to allow using the function in R sessions:&lt;/p&gt;
&lt;pre class=&#34;cpp&#34;&gt;&lt;code&gt;#include &amp;lt;RcppEigen.h&amp;gt;

// [[Rcpp::depends(RcppEigen)]]

using namespace Eigen;


// [[Rcpp::export]]
Rcpp::List EigenDecomp(const Map&amp;lt;MatrixXd&amp;gt; M) 
{
    //Constructing sample covariance matrix 
    MatrixXd centered = M.rowwise() - M.colwise().mean();
    MatrixXd cov = centered.adjoint() * centered/(M.rows()-1);
    
    //Using Eigen&amp;#39;s eigensolver (with default settings)
    SelfAdjointEigenSolver&amp;lt;MatrixXd&amp;gt; eig(cov);
    
    VectorXd values = eig.eigenvalues();
    MatrixXd vectors = eig.eigenvectors();
    
    //Returning results as a R-list
    return Rcpp::List::create(Rcpp::Named(&amp;quot;Cov&amp;quot;) = cov,
                           Rcpp::Named(&amp;quot;values&amp;quot;) = values,
                           Rcpp::Named(&amp;quot;vectors&amp;quot;) = vectors);
}&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Note on compilation: I’m using a laptop with an i7-8750h CPU running Windows 10. The compiler is the version of &lt;a href=&#34;http://mingw-w64.org/doku.php&#34;&gt;mingw-w64&lt;/a&gt; that comes with &lt;a href=&#34;https://cran.r-project.org/bin/windows/Rtools/&#34;&gt;Rtools40&lt;/a&gt; (i.e. the Windows port of GCC 8.3.0). By creating a Makevars.win file in an &lt;code&gt;./Documents/.R&lt;/code&gt; folder file I altered R’s default flags for g++ to use:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;CXXFLAGS = -march=native -O3 -Wno-ignored-attributes $(DEBUGFLAG)&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Eigen is a template expression library that relies heavily on the compiler using the best options for the machine at hand. Here we’ve used &lt;code&gt;-march=native&lt;/code&gt; which enables all instruction subsets supported by my local machine. For more info running &lt;code&gt;g++ -march=native -Q --help=target&lt;/code&gt; in the command line will show you what compiler flags this turns on. For example mine enables flags targeting AVX2, as well as a variety of others. The &lt;code&gt;-Wno-ignored-attributes&lt;/code&gt; suppresses the large number of ignored attributes warnings that an expression template library like Eigen can produce. Let’s compare with R’s built in PCA function &lt;a href=&#34;https://www.rdocumentation.org/packages/stats/versions/3.6.2/topics/prcomp&#34;&gt;prcomp&lt;/a&gt;&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;set.seed(42)
X = matrix(rnorm(10000*4), 10000, 4)

R = prcomp(X)

Cpp = EigenDecomp(X)

print(R$sdev^2)&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## [1] 1.036884 1.021022 1.013685 1.001778&lt;/code&gt;&lt;/pre&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;print(Cpp$values)&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## [1] 1.001778 1.013685 1.021022 1.036884&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;The eigenvalues are exactly the same, just in opposite order. Next time we might link an optimized BLAS library such as Intel’s MKL, but I suspect the plain Eigen version is quite competitive.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&#34;footnotes&#34;&gt;
&lt;hr /&gt;
&lt;ol&gt;
&lt;li id=&#34;fn1&#34;&gt;&lt;p&gt;The exact definition of “random variable” or “random vector” is unimportant. For mathematicians this means that there is a probability space &lt;span class=&#34;math inline&#34;&gt;\((\Omega, \mathcal{M}, \mathbf{P})\)&lt;/span&gt; and that &lt;span class=&#34;math inline&#34;&gt;\(\vec{X}:\Omega \mapsto \mathbb{R}^d\)&lt;/span&gt; is a Borel-measurable map.&lt;a href=&#34;#fnref1&#34; class=&#34;footnote-back&#34;&gt;↩︎&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li id=&#34;fn2&#34;&gt;&lt;p&gt;Note on existence. A vector that attains the maximum must exist because the expression being maximized is continuous (in fact quadratic) in &lt;span class=&#34;math inline&#34;&gt;\(\vec{\omega}\)&lt;/span&gt; and the unit sphere in &lt;span class=&#34;math inline&#34;&gt;\(\mathbb{R}^d\)&lt;/span&gt; is compact.&lt;a href=&#34;#fnref2&#34; class=&#34;footnote-back&#34;&gt;↩︎&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li id=&#34;fn3&#34;&gt;&lt;p&gt;And this is indeed the true definition of the &lt;a href=&#34;https://en.wikipedia.org/wiki/Gradient#Differential_or_(exterior)_derivative&#34;&gt;gradient of a function&lt;/a&gt;.&lt;a href=&#34;#fnref3&#34; class=&#34;footnote-back&#34;&gt;↩︎&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li id=&#34;fn4&#34;&gt;&lt;p&gt;This is the method of &lt;a href=&#34;https://en.wikipedia.org/wiki/Lagrange_multiplier#Modern_formulation_via_differentiable_manifolds&#34;&gt;Lagrange multipliers&lt;/a&gt;. It can be proven easily as follows. Let &lt;span class=&#34;math inline&#34;&gt;\(\vec{v}\)&lt;/span&gt; be any vector tangent to the sphere at the maximizing point &lt;span class=&#34;math inline&#34;&gt;\(\vec{\omega}_1\)&lt;/span&gt;, and let &lt;span class=&#34;math inline&#34;&gt;\(\gamma(t)\)&lt;/span&gt; be a smooth curve on the sphere going through &lt;span class=&#34;math inline&#34;&gt;\(\vec{\omega}_1\)&lt;/span&gt; with &lt;span class=&#34;math inline&#34;&gt;\(\gamma&amp;#39;(t) = \vec{v}\)&lt;/span&gt;. Then the function &lt;span class=&#34;math inline&#34;&gt;\(f(\gamma(t))\)&lt;/span&gt; achieves a maximum at the value of &lt;span class=&#34;math inline&#34;&gt;\(t\)&lt;/span&gt; at which &lt;span class=&#34;math inline&#34;&gt;\(\gamma(t) = \vec{\omega}_1\)&lt;/span&gt; so it’s derivative must be 0 there. Thus &lt;span class=&#34;math inline&#34;&gt;\(0 = d/dt(f(\gamma(t))) = df_{\vec{\omega}_1} \ (\gamma&amp;#39;(t)) = \langle \gamma&amp;#39;(t),\nabla_{\vec{\omega}_1}f\rangle = \langle\vec{v},\nabla_{\vec{\omega}_1}f\rangle\)&lt;/span&gt;. Since &lt;span class=&#34;math inline&#34;&gt;\(\vec{v}\)&lt;/span&gt; was an arbitrary tangent vector this shows that &lt;span class=&#34;math inline&#34;&gt;\(\nabla_{\vec{\omega}_1}f\)&lt;/span&gt; is orthogonal to every tangent vector and hence is a normal vector.&lt;a href=&#34;#fnref4&#34; class=&#34;footnote-back&#34;&gt;↩︎&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li id=&#34;fn5&#34;&gt;&lt;p&gt;The symbol &lt;span class=&#34;math inline&#34;&gt;\(\perp\)&lt;/span&gt; means “prependicular to”.&lt;a href=&#34;#fnref5&#34; class=&#34;footnote-back&#34;&gt;↩︎&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;/div&gt;
</description>
    </item>
    
  </channel>
</rss>
